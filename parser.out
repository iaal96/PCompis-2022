Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main
Rule 2     programA1 -> <empty>
Rule 3     main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE
Rule 4     mainA1 -> <empty>
Rule 5     programVars -> declaration
Rule 6     programVars -> <empty>
Rule 7     programFunc -> function programFunc
Rule 8     programFunc -> <empty>
Rule 9     assignment -> ID EQUAL Expression2 SEMICOLON
Rule 10    declaration -> VAR declarationPDT
Rule 11    declarationPDT -> PDT vars SEMICOLON declarationPDT
Rule 12    declarationPDT -> <empty>
Rule 13    PDT -> INT
Rule 14    PDT -> FLOAT
Rule 15    PDT -> CHAR
Rule 16    return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
Rule 17    if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
Rule 18    ifElse -> ELSE LEFTBRACE statement RIGHTBRACE
Rule 19    ifElse -> <empty>
Rule 20    for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
Rule 21    forDeclaration -> ID EQUAL CST_INT
Rule 22    comment -> COMMENT_TEXT
Rule 23    while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE
Rule 24    vars -> ID varsA1 varsArray varsComa
Rule 25    varsA1 -> <empty>
Rule 26    varsComa -> COMA vars
Rule 27    varsComa -> <empty>
Rule 28    varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK
Rule 29    varsMatrix -> <empty>
Rule 30    varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix
Rule 31    varsArray -> <empty>
Rule 32    function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
Rule 33    function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
Rule 34    param -> PDT ID paramA1 functionParam
Rule 35    functionParam -> COMA param
Rule 36    functionParam -> <empty>
Rule 37    paramA1 -> <empty>
Rule 38    functionType -> FUNCTION PDT
Rule 39    functionType -> FUNCTION VOID functionTypeA1
Rule 40    cst_PDT -> CST_INT cstprimA1
Rule 41    cst_PDT -> CST_FLOAT cstprimA2
Rule 42    cst_PDT -> CST_CHAR cstprimA3
Rule 43    cstprimA1 -> <empty>
Rule 44    cstprimA2 -> <empty>
Rule 45    cstprimA3 -> <empty>
Rule 46    functionA1 -> <empty>
Rule 47    Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested
Rule 48    Expression2 -> Expression3 opMatrix
Rule 49    Expression2 -> Expression3 Exp2A1
Rule 50    Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested
Rule 51    Expression2Nested -> Expression3 Exp2A1
Rule 52    Exp2A1 -> <empty>
Rule 53    Expression22 -> AND addOperator
Rule 54    Expression22 -> OR addOperator
Rule 55    Expression3 -> exp Exp3A1 Expression33 exp Exp3A1
Rule 56    Expression3 -> exp Exp3A1
Rule 57    Expression33 -> GT addOperator
Rule 58    Expression33 -> LT addOperator
Rule 59    Expression33 -> NOTEQUAL addOperator
Rule 60    Expression33 -> ISEQUAL addOperator
Rule 61    Exp3A1 -> <empty>
Rule 62    opMatrix -> EXCLAMATION addOperator
Rule 63    opMatrix -> QUESTION addOperator
Rule 64    opMatrix -> DOLLARSIGN addOperator
Rule 65    exp -> term termA1 expFunction
Rule 66    exp -> term termA1
Rule 67    termA1 -> <empty>
Rule 68    expFunction -> PLUS addOperator exp
Rule 69    expFunction -> MINUS addOperator exp
Rule 70    functionTypeA1 -> <empty>
Rule 71    term -> factor factorA1 termFunction
Rule 72    term -> factor factorA1
Rule 73    factorA1 -> <empty>
Rule 74    termFunction -> MULTIPLY addOperator term
Rule 75    termFunction -> DIVIDE addOperator term
Rule 76    addOperator -> <empty>
Rule 77    factor -> LEFTPAR Expression2 RIGHTPAR
Rule 78    factor -> cst_PDT addOperand
Rule 79    factor -> module
Rule 80    factor -> ID addOperand addTypeId
Rule 81    addOperand -> <empty>
Rule 82    addTypeId -> <empty>
Rule 83    read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON
Rule 84    id_list -> ID addRead id_listFunction
Rule 85    id_listFunction -> COMA id_list
Rule 86    id_listFunction -> <empty>
Rule 87    addRead -> <empty>
Rule 88    print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
Rule 89    printFunction -> print_param COMA printFunction2
Rule 90    printFunction -> print_param
Rule 91    printFunction2 -> printFunction
Rule 92    addPrint -> <empty>
Rule 93    print_param -> Expression2 addPrint
Rule 94    print_param -> CST_STRING addPrintString
Rule 95    addPrintString -> <empty>
Rule 96    module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
Rule 97    statement -> return
Rule 98    statement -> if statement
Rule 99    statement -> comment statement
Rule 100   statement -> read statement
Rule 101   statement -> print statement
Rule 102   statement -> assignment statement
Rule 103   statement -> declaration statement
Rule 104   statement -> module statement
Rule 105   statement -> for statement
Rule 106   statement -> while statement
Rule 107   statement -> <empty>
Rule 108   moduleFunction -> ID COMA moduleFunction
Rule 109   moduleFunction -> Expression2 COMA moduleFunction
Rule 110   moduleFunction -> Expression2 RIGHTPAR
Rule 111   moduleFunction -> <empty>

Terminals, with rules where they appear

AND                  : 53
CHAR                 : 15
COMA                 : 26 35 85 89 108 109
COMMENT_TEXT         : 22
CST_CHAR             : 42
CST_FLOAT            : 41
CST_INT              : 21 28 30 40
CST_STRING           : 94
DIVIDE               : 75
DO                   : 23
DOLLARSIGN           : 64
ELSE                 : 18
EQUAL                : 9 21
EXCLAMATION          : 62
FLOAT                : 14
FOR                  : 20
FUNCTION             : 38 39
GT                   : 57
ID                   : 1 9 21 24 32 33 34 80 84 96 108
IF                   : 17
INT                  : 13
ISEQUAL              : 60
LEFTBRACE            : 3 17 18 20 23 32 33
LEFTBRACK            : 28 30
LEFTPAR              : 3 16 17 23 32 33 77 83 88 96
LT                   : 58
MAIN                 : 3
MINUS                : 69
MULTIPLY             : 74
NOTEQUAL             : 59
OR                   : 54
PLUS                 : 68
PRINT                : 88
PROGRAM              : 1
QUESTION             : 63
READ                 : 83
RETURN               : 16
RIGHTBRACE           : 3 17 18 20 23 32 33
RIGHTBRACK           : 28 30
RIGHTPAR             : 3 16 17 23 32 33 77 83 88 96 110
SEMICOLON            : 1 9 11 16 32 33 83 88 96
THEN                 : 17
TO                   : 20
VAR                  : 10
VOID                 : 39
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

Exp2A1               : 47 49 50 51
Exp3A1               : 55 55 56
Expression2          : 9 16 17 20 23 77 93 109 110
Expression22         : 47 50
Expression2Nested    : 47 50
Expression3          : 47 48 49 50 51
Expression33         : 55
PDT                  : 11 34 38
addOperand           : 78 80
addOperator          : 53 54 57 58 59 60 62 63 64 68 69 74 75
addPrint             : 93
addPrintString       : 94
addRead              : 84
addTypeId            : 80
assignment           : 102
comment              : 99
cst_PDT              : 78
cstprimA1            : 40
cstprimA2            : 41
cstprimA3            : 42
declaration          : 5 103
declarationPDT       : 10 11
exp                  : 55 55 56 68 69
expFunction          : 65
factor               : 71 72
factorA1             : 71 72
for                  : 105
forDeclaration       : 20
function             : 7
functionA1           : 32 33
functionParam        : 34
functionType         : 32 33
functionTypeA1       : 39
id_list              : 83 85
id_listFunction      : 84
if                   : 98
ifElse               : 17
main                 : 1
mainA1               : 3
module               : 79 104
moduleFunction       : 96 108 109
opMatrix             : 48
param                : 32 35
paramA1              : 34
print                : 101
printFunction        : 88 91
printFunction2       : 89
print_param          : 89 90
program              : 0
programA1            : 1
programFunc          : 1 7
programVars          : 1
read                 : 100
return               : 97
statement            : 3 17 18 20 23 32 33 98 99 100 101 102 103 104 105 106
term                 : 65 66 74 75
termA1               : 65 66
termFunction         : 71
vars                 : 11 26
varsA1               : 24
varsArray            : 24
varsComa             : 24
varsMatrix           : 30
while                : 106

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID programA1 SEMICOLON programVars programFunc main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID programA1 SEMICOLON programVars programFunc main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . programA1 SEMICOLON programVars programFunc main
    (2) programA1 -> .

    SEMICOLON       reduce using rule 2 (programA1 -> .)

    programA1                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID programA1 . SEMICOLON programVars programFunc main

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID programA1 SEMICOLON . programVars programFunc main
    (5) programVars -> . declaration
    (6) programVars -> .
    (10) declaration -> . VAR declarationPDT

    FUNCTION        reduce using rule 6 (programVars -> .)
    MAIN            reduce using rule 6 (programVars -> .)
    VAR             shift and go to state 8

    programVars                    shift and go to state 6
    declaration                    shift and go to state 7

state 6

    (1) program -> PROGRAM ID programA1 SEMICOLON programVars . programFunc main
    (7) programFunc -> . function programFunc
    (8) programFunc -> .
    (32) function -> . functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (33) function -> . functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (38) functionType -> . FUNCTION PDT
    (39) functionType -> . FUNCTION VOID functionTypeA1

    MAIN            reduce using rule 8 (programFunc -> .)
    FUNCTION        shift and go to state 12

    programFunc                    shift and go to state 9
    function                       shift and go to state 10
    functionType                   shift and go to state 11

state 7

    (5) programVars -> declaration .

    FUNCTION        reduce using rule 5 (programVars -> declaration .)
    MAIN            reduce using rule 5 (programVars -> declaration .)


state 8

    (10) declaration -> VAR . declarationPDT
    (11) declarationPDT -> . PDT vars SEMICOLON declarationPDT
    (12) declarationPDT -> .
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    FUNCTION        reduce using rule 12 (declarationPDT -> .)
    MAIN            reduce using rule 12 (declarationPDT -> .)
    RETURN          reduce using rule 12 (declarationPDT -> .)
    IF              reduce using rule 12 (declarationPDT -> .)
    COMMENT_TEXT    reduce using rule 12 (declarationPDT -> .)
    READ            reduce using rule 12 (declarationPDT -> .)
    PRINT           reduce using rule 12 (declarationPDT -> .)
    ID              reduce using rule 12 (declarationPDT -> .)
    VAR             reduce using rule 12 (declarationPDT -> .)
    FOR             reduce using rule 12 (declarationPDT -> .)
    WHILE           reduce using rule 12 (declarationPDT -> .)
    RIGHTBRACE      reduce using rule 12 (declarationPDT -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    declarationPDT                 shift and go to state 13
    PDT                            shift and go to state 14

state 9

    (1) program -> PROGRAM ID programA1 SEMICOLON programVars programFunc . main
    (3) main -> . mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE
    (4) mainA1 -> .

    MAIN            reduce using rule 4 (mainA1 -> .)

    main                           shift and go to state 18
    mainA1                         shift and go to state 19

state 10

    (7) programFunc -> function . programFunc
    (7) programFunc -> . function programFunc
    (8) programFunc -> .
    (32) function -> . functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (33) function -> . functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (38) functionType -> . FUNCTION PDT
    (39) functionType -> . FUNCTION VOID functionTypeA1

    MAIN            reduce using rule 8 (programFunc -> .)
    FUNCTION        shift and go to state 12

    function                       shift and go to state 10
    programFunc                    shift and go to state 20
    functionType                   shift and go to state 11

state 11

    (32) function -> functionType . ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (33) function -> functionType . ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    ID              shift and go to state 21


state 12

    (38) functionType -> FUNCTION . PDT
    (39) functionType -> FUNCTION . VOID functionTypeA1
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    VOID            shift and go to state 23
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    PDT                            shift and go to state 22

state 13

    (10) declaration -> VAR declarationPDT .

    FUNCTION        reduce using rule 10 (declaration -> VAR declarationPDT .)
    MAIN            reduce using rule 10 (declaration -> VAR declarationPDT .)
    RETURN          reduce using rule 10 (declaration -> VAR declarationPDT .)
    IF              reduce using rule 10 (declaration -> VAR declarationPDT .)
    COMMENT_TEXT    reduce using rule 10 (declaration -> VAR declarationPDT .)
    READ            reduce using rule 10 (declaration -> VAR declarationPDT .)
    PRINT           reduce using rule 10 (declaration -> VAR declarationPDT .)
    ID              reduce using rule 10 (declaration -> VAR declarationPDT .)
    VAR             reduce using rule 10 (declaration -> VAR declarationPDT .)
    FOR             reduce using rule 10 (declaration -> VAR declarationPDT .)
    WHILE           reduce using rule 10 (declaration -> VAR declarationPDT .)
    RIGHTBRACE      reduce using rule 10 (declaration -> VAR declarationPDT .)


state 14

    (11) declarationPDT -> PDT . vars SEMICOLON declarationPDT
    (24) vars -> . ID varsA1 varsArray varsComa

    ID              shift and go to state 25

    vars                           shift and go to state 24

state 15

    (13) PDT -> INT .

    ID              reduce using rule 13 (PDT -> INT .)


state 16

    (14) PDT -> FLOAT .

    ID              reduce using rule 14 (PDT -> FLOAT .)


state 17

    (15) PDT -> CHAR .

    ID              reduce using rule 15 (PDT -> CHAR .)


state 18

    (1) program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main .

    $end            reduce using rule 1 (program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main .)


state 19

    (3) main -> mainA1 . MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE

    MAIN            shift and go to state 26


state 20

    (7) programFunc -> function programFunc .

    MAIN            reduce using rule 7 (programFunc -> function programFunc .)


state 21

    (32) function -> functionType ID . functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (33) function -> functionType ID . functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (46) functionA1 -> .

    LEFTPAR         reduce using rule 46 (functionA1 -> .)

    functionA1                     shift and go to state 27

state 22

    (38) functionType -> FUNCTION PDT .

    ID              reduce using rule 38 (functionType -> FUNCTION PDT .)


state 23

    (39) functionType -> FUNCTION VOID . functionTypeA1
    (70) functionTypeA1 -> .

    ID              reduce using rule 70 (functionTypeA1 -> .)

    functionTypeA1                 shift and go to state 28

state 24

    (11) declarationPDT -> PDT vars . SEMICOLON declarationPDT

    SEMICOLON       shift and go to state 29


state 25

    (24) vars -> ID . varsA1 varsArray varsComa
    (25) varsA1 -> .

    LEFTBRACK       reduce using rule 25 (varsA1 -> .)
    COMA            reduce using rule 25 (varsA1 -> .)
    SEMICOLON       reduce using rule 25 (varsA1 -> .)

    varsA1                         shift and go to state 30

state 26

    (3) main -> mainA1 MAIN . LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 31


state 27

    (32) function -> functionType ID functionA1 . LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (33) function -> functionType ID functionA1 . LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 32


state 28

    (39) functionType -> FUNCTION VOID functionTypeA1 .

    ID              reduce using rule 39 (functionType -> FUNCTION VOID functionTypeA1 .)


state 29

    (11) declarationPDT -> PDT vars SEMICOLON . declarationPDT
    (11) declarationPDT -> . PDT vars SEMICOLON declarationPDT
    (12) declarationPDT -> .
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    FUNCTION        reduce using rule 12 (declarationPDT -> .)
    MAIN            reduce using rule 12 (declarationPDT -> .)
    RETURN          reduce using rule 12 (declarationPDT -> .)
    IF              reduce using rule 12 (declarationPDT -> .)
    COMMENT_TEXT    reduce using rule 12 (declarationPDT -> .)
    READ            reduce using rule 12 (declarationPDT -> .)
    PRINT           reduce using rule 12 (declarationPDT -> .)
    ID              reduce using rule 12 (declarationPDT -> .)
    VAR             reduce using rule 12 (declarationPDT -> .)
    FOR             reduce using rule 12 (declarationPDT -> .)
    WHILE           reduce using rule 12 (declarationPDT -> .)
    RIGHTBRACE      reduce using rule 12 (declarationPDT -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    PDT                            shift and go to state 14
    declarationPDT                 shift and go to state 33

state 30

    (24) vars -> ID varsA1 . varsArray varsComa
    (30) varsArray -> . LEFTBRACK CST_INT RIGHTBRACK varsMatrix
    (31) varsArray -> .

    LEFTBRACK       shift and go to state 35
    COMA            reduce using rule 31 (varsArray -> .)
    SEMICOLON       reduce using rule 31 (varsArray -> .)

    varsArray                      shift and go to state 34

state 31

    (3) main -> mainA1 MAIN LEFTPAR . RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 36


state 32

    (32) function -> functionType ID functionA1 LEFTPAR . param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (33) function -> functionType ID functionA1 LEFTPAR . RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (34) param -> . PDT ID paramA1 functionParam
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    RIGHTPAR        shift and go to state 38
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    param                          shift and go to state 37
    PDT                            shift and go to state 39

state 33

    (11) declarationPDT -> PDT vars SEMICOLON declarationPDT .

    FUNCTION        reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    MAIN            reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    RETURN          reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    IF              reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    COMMENT_TEXT    reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    READ            reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    PRINT           reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    ID              reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    VAR             reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    FOR             reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    WHILE           reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    RIGHTBRACE      reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)


state 34

    (24) vars -> ID varsA1 varsArray . varsComa
    (26) varsComa -> . COMA vars
    (27) varsComa -> .

    COMA            shift and go to state 41
    SEMICOLON       reduce using rule 27 (varsComa -> .)

    varsComa                       shift and go to state 40

state 35

    (30) varsArray -> LEFTBRACK . CST_INT RIGHTBRACK varsMatrix

    CST_INT         shift and go to state 42


state 36

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 43


state 37

    (32) function -> functionType ID functionA1 LEFTPAR param . RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 44


state 38

    (33) function -> functionType ID functionA1 LEFTPAR RIGHTPAR . SEMICOLON LEFTBRACE statement RIGHTBRACE

    SEMICOLON       shift and go to state 45


state 39

    (34) param -> PDT . ID paramA1 functionParam

    ID              shift and go to state 46


state 40

    (24) vars -> ID varsA1 varsArray varsComa .

    SEMICOLON       reduce using rule 24 (vars -> ID varsA1 varsArray varsComa .)


state 41

    (26) varsComa -> COMA . vars
    (24) vars -> . ID varsA1 varsArray varsComa

    ID              shift and go to state 25

    vars                           shift and go to state 47

state 42

    (30) varsArray -> LEFTBRACK CST_INT . RIGHTBRACK varsMatrix

    RIGHTBRACK      shift and go to state 48


state 43

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE . statement RIGHTBRACE
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 49
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 44

    (32) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR . SEMICOLON LEFTBRACE statement RIGHTBRACE

    SEMICOLON       shift and go to state 68


state 45

    (33) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 69


state 46

    (34) param -> PDT ID . paramA1 functionParam
    (37) paramA1 -> .

    COMA            reduce using rule 37 (paramA1 -> .)
    RIGHTPAR        reduce using rule 37 (paramA1 -> .)

    paramA1                        shift and go to state 70

state 47

    (26) varsComa -> COMA vars .

    SEMICOLON       reduce using rule 26 (varsComa -> COMA vars .)


state 48

    (30) varsArray -> LEFTBRACK CST_INT RIGHTBRACK . varsMatrix
    (28) varsMatrix -> . LEFTBRACK CST_INT RIGHTBRACK
    (29) varsMatrix -> .

    LEFTBRACK       shift and go to state 71
    COMA            reduce using rule 29 (varsMatrix -> .)
    SEMICOLON       reduce using rule 29 (varsMatrix -> .)

    varsMatrix                     shift and go to state 72

state 49

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 73


state 50

    (97) statement -> return .

    RIGHTBRACE      reduce using rule 97 (statement -> return .)


state 51

    (98) statement -> if . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    if                             shift and go to state 51
    statement                      shift and go to state 74
    return                         shift and go to state 50
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 52

    (99) statement -> comment . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    comment                        shift and go to state 52
    statement                      shift and go to state 75
    return                         shift and go to state 50
    if                             shift and go to state 51
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 53

    (100) statement -> read . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    read                           shift and go to state 53
    statement                      shift and go to state 76
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 54

    (101) statement -> print . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    print                          shift and go to state 54
    statement                      shift and go to state 77
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 55

    (102) statement -> assignment . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    assignment                     shift and go to state 55
    statement                      shift and go to state 78
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 56

    (103) statement -> declaration . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    declaration                    shift and go to state 56
    statement                      shift and go to state 79
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 57

    (104) statement -> module . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    module                         shift and go to state 57
    statement                      shift and go to state 80
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    for                            shift and go to state 58
    while                          shift and go to state 59

state 58

    (105) statement -> for . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    for                            shift and go to state 58
    statement                      shift and go to state 81
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    while                          shift and go to state 59

state 59

    (106) statement -> while . statement
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    while                          shift and go to state 59
    statement                      shift and go to state 82
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58

state 60

    (16) return -> RETURN . LEFTPAR Expression2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 83


state 61

    (17) if -> IF . LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse

    LEFTPAR         shift and go to state 84


state 62

    (22) comment -> COMMENT_TEXT .

    RETURN          reduce using rule 22 (comment -> COMMENT_TEXT .)
    IF              reduce using rule 22 (comment -> COMMENT_TEXT .)
    COMMENT_TEXT    reduce using rule 22 (comment -> COMMENT_TEXT .)
    READ            reduce using rule 22 (comment -> COMMENT_TEXT .)
    PRINT           reduce using rule 22 (comment -> COMMENT_TEXT .)
    ID              reduce using rule 22 (comment -> COMMENT_TEXT .)
    VAR             reduce using rule 22 (comment -> COMMENT_TEXT .)
    FOR             reduce using rule 22 (comment -> COMMENT_TEXT .)
    WHILE           reduce using rule 22 (comment -> COMMENT_TEXT .)
    RIGHTBRACE      reduce using rule 22 (comment -> COMMENT_TEXT .)


state 63

    (83) read -> READ . LEFTPAR id_list RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 85


state 64

    (88) print -> PRINT . LEFTPAR printFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 86


state 65

    (9) assignment -> ID . EQUAL Expression2 SEMICOLON
    (96) module -> ID . LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    EQUAL           shift and go to state 87
    LEFTPAR         shift and go to state 88


state 66

    (20) for -> FOR . forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (21) forDeclaration -> . ID EQUAL CST_INT

    ID              shift and go to state 90

    forDeclaration                 shift and go to state 89

state 67

    (23) while -> WHILE . LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    LEFTPAR         shift and go to state 91


state 68

    (32) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 92


state 69

    (33) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE . statement RIGHTBRACE
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 93
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 70

    (34) param -> PDT ID paramA1 . functionParam
    (35) functionParam -> . COMA param
    (36) functionParam -> .

    COMA            shift and go to state 95
    RIGHTPAR        reduce using rule 36 (functionParam -> .)

    functionParam                  shift and go to state 94

state 71

    (28) varsMatrix -> LEFTBRACK . CST_INT RIGHTBRACK

    CST_INT         shift and go to state 96


state 72

    (30) varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .

    COMA            reduce using rule 30 (varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .)
    SEMICOLON       reduce using rule 30 (varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .)


state 73

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE .

    $end            reduce using rule 3 (main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE .)


state 74

    (98) statement -> if statement .

    RIGHTBRACE      reduce using rule 98 (statement -> if statement .)


state 75

    (99) statement -> comment statement .

    RIGHTBRACE      reduce using rule 99 (statement -> comment statement .)


state 76

    (100) statement -> read statement .

    RIGHTBRACE      reduce using rule 100 (statement -> read statement .)


state 77

    (101) statement -> print statement .

    RIGHTBRACE      reduce using rule 101 (statement -> print statement .)


state 78

    (102) statement -> assignment statement .

    RIGHTBRACE      reduce using rule 102 (statement -> assignment statement .)


state 79

    (103) statement -> declaration statement .

    RIGHTBRACE      reduce using rule 103 (statement -> declaration statement .)


state 80

    (104) statement -> module statement .

    RIGHTBRACE      reduce using rule 104 (statement -> module statement .)


state 81

    (105) statement -> for statement .

    RIGHTBRACE      reduce using rule 105 (statement -> for statement .)


state 82

    (106) statement -> while statement .

    RIGHTBRACE      reduce using rule 106 (statement -> while statement .)


state 83

    (16) return -> RETURN LEFTPAR . Expression2 RIGHTPAR SEMICOLON
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 98
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 84

    (17) if -> IF LEFTPAR . Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 109
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 85

    (83) read -> READ LEFTPAR . id_list RIGHTPAR SEMICOLON
    (84) id_list -> . ID addRead id_listFunction

    ID              shift and go to state 111

    id_list                        shift and go to state 110

state 86

    (88) print -> PRINT LEFTPAR . printFunction RIGHTPAR SEMICOLON
    (89) printFunction -> . print_param COMA printFunction2
    (90) printFunction -> . print_param
    (93) print_param -> . Expression2 addPrint
    (94) print_param -> . CST_STRING addPrintString
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    CST_STRING      shift and go to state 115
    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    printFunction                  shift and go to state 112
    print_param                    shift and go to state 113
    Expression2                    shift and go to state 114
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 87

    (9) assignment -> ID EQUAL . Expression2 SEMICOLON
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 116
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 88

    (96) module -> ID LEFTPAR . moduleFunction RIGHTPAR SEMICOLON
    (108) moduleFunction -> . ID COMA moduleFunction
    (109) moduleFunction -> . Expression2 COMA moduleFunction
    (110) moduleFunction -> . Expression2 RIGHTPAR
    (111) moduleFunction -> .
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    ID              shift and go to state 117
    RIGHTPAR        reduce using rule 111 (moduleFunction -> .)
    LEFTPAR         shift and go to state 97
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    moduleFunction                 shift and go to state 118
    Expression2                    shift and go to state 119
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 89

    (20) for -> FOR forDeclaration . TO Expression2 LEFTBRACE statement RIGHTBRACE

    TO              shift and go to state 120


state 90

    (21) forDeclaration -> ID . EQUAL CST_INT

    EQUAL           shift and go to state 121


state 91

    (23) while -> WHILE LEFTPAR . Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 122
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 92

    (32) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE . statement RIGHTBRACE
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 123
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 93

    (33) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 124


state 94

    (34) param -> PDT ID paramA1 functionParam .

    RIGHTPAR        reduce using rule 34 (param -> PDT ID paramA1 functionParam .)


state 95

    (35) functionParam -> COMA . param
    (34) param -> . PDT ID paramA1 functionParam
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    param                          shift and go to state 125
    PDT                            shift and go to state 39

state 96

    (28) varsMatrix -> LEFTBRACK CST_INT . RIGHTBRACK

    RIGHTBRACK      shift and go to state 126


state 97

    (77) factor -> LEFTPAR . Expression2 RIGHTPAR
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 127
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 98

    (16) return -> RETURN LEFTPAR Expression2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 128


state 99

    (47) Expression2 -> Expression3 . Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> Expression3 . opMatrix
    (49) Expression2 -> Expression3 . Exp2A1
    (52) Exp2A1 -> .
    (62) opMatrix -> . EXCLAMATION addOperator
    (63) opMatrix -> . QUESTION addOperator
    (64) opMatrix -> . DOLLARSIGN addOperator

    AND             reduce using rule 52 (Exp2A1 -> .)
    OR              reduce using rule 52 (Exp2A1 -> .)
    RIGHTPAR        reduce using rule 52 (Exp2A1 -> .)
    COMA            reduce using rule 52 (Exp2A1 -> .)
    SEMICOLON       reduce using rule 52 (Exp2A1 -> .)
    LEFTBRACE       reduce using rule 52 (Exp2A1 -> .)
    EXCLAMATION     shift and go to state 131
    QUESTION        shift and go to state 132
    DOLLARSIGN      shift and go to state 133

    Exp2A1                         shift and go to state 129
    opMatrix                       shift and go to state 130

state 100

    (55) Expression3 -> exp . Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> exp . Exp3A1
    (61) Exp3A1 -> .

    GT              reduce using rule 61 (Exp3A1 -> .)
    LT              reduce using rule 61 (Exp3A1 -> .)
    NOTEQUAL        reduce using rule 61 (Exp3A1 -> .)
    ISEQUAL         reduce using rule 61 (Exp3A1 -> .)
    EXCLAMATION     reduce using rule 61 (Exp3A1 -> .)
    QUESTION        reduce using rule 61 (Exp3A1 -> .)
    DOLLARSIGN      reduce using rule 61 (Exp3A1 -> .)
    AND             reduce using rule 61 (Exp3A1 -> .)
    OR              reduce using rule 61 (Exp3A1 -> .)
    RIGHTPAR        reduce using rule 61 (Exp3A1 -> .)
    COMA            reduce using rule 61 (Exp3A1 -> .)
    SEMICOLON       reduce using rule 61 (Exp3A1 -> .)
    LEFTBRACE       reduce using rule 61 (Exp3A1 -> .)

    Exp3A1                         shift and go to state 134

state 101

    (65) exp -> term . termA1 expFunction
    (66) exp -> term . termA1
    (67) termA1 -> .

    PLUS            reduce using rule 67 (termA1 -> .)
    MINUS           reduce using rule 67 (termA1 -> .)
    GT              reduce using rule 67 (termA1 -> .)
    LT              reduce using rule 67 (termA1 -> .)
    NOTEQUAL        reduce using rule 67 (termA1 -> .)
    ISEQUAL         reduce using rule 67 (termA1 -> .)
    EXCLAMATION     reduce using rule 67 (termA1 -> .)
    QUESTION        reduce using rule 67 (termA1 -> .)
    DOLLARSIGN      reduce using rule 67 (termA1 -> .)
    AND             reduce using rule 67 (termA1 -> .)
    OR              reduce using rule 67 (termA1 -> .)
    RIGHTPAR        reduce using rule 67 (termA1 -> .)
    COMA            reduce using rule 67 (termA1 -> .)
    SEMICOLON       reduce using rule 67 (termA1 -> .)
    LEFTBRACE       reduce using rule 67 (termA1 -> .)

    termA1                         shift and go to state 135

state 102

    (71) term -> factor . factorA1 termFunction
    (72) term -> factor . factorA1
    (73) factorA1 -> .

    MULTIPLY        reduce using rule 73 (factorA1 -> .)
    DIVIDE          reduce using rule 73 (factorA1 -> .)
    PLUS            reduce using rule 73 (factorA1 -> .)
    MINUS           reduce using rule 73 (factorA1 -> .)
    GT              reduce using rule 73 (factorA1 -> .)
    LT              reduce using rule 73 (factorA1 -> .)
    NOTEQUAL        reduce using rule 73 (factorA1 -> .)
    ISEQUAL         reduce using rule 73 (factorA1 -> .)
    EXCLAMATION     reduce using rule 73 (factorA1 -> .)
    QUESTION        reduce using rule 73 (factorA1 -> .)
    DOLLARSIGN      reduce using rule 73 (factorA1 -> .)
    AND             reduce using rule 73 (factorA1 -> .)
    OR              reduce using rule 73 (factorA1 -> .)
    RIGHTPAR        reduce using rule 73 (factorA1 -> .)
    COMA            reduce using rule 73 (factorA1 -> .)
    SEMICOLON       reduce using rule 73 (factorA1 -> .)
    LEFTBRACE       reduce using rule 73 (factorA1 -> .)

    factorA1                       shift and go to state 136

state 103

    (78) factor -> cst_PDT . addOperand
    (81) addOperand -> .

    MULTIPLY        reduce using rule 81 (addOperand -> .)
    DIVIDE          reduce using rule 81 (addOperand -> .)
    PLUS            reduce using rule 81 (addOperand -> .)
    MINUS           reduce using rule 81 (addOperand -> .)
    GT              reduce using rule 81 (addOperand -> .)
    LT              reduce using rule 81 (addOperand -> .)
    NOTEQUAL        reduce using rule 81 (addOperand -> .)
    ISEQUAL         reduce using rule 81 (addOperand -> .)
    EXCLAMATION     reduce using rule 81 (addOperand -> .)
    QUESTION        reduce using rule 81 (addOperand -> .)
    DOLLARSIGN      reduce using rule 81 (addOperand -> .)
    AND             reduce using rule 81 (addOperand -> .)
    OR              reduce using rule 81 (addOperand -> .)
    RIGHTPAR        reduce using rule 81 (addOperand -> .)
    COMA            reduce using rule 81 (addOperand -> .)
    SEMICOLON       reduce using rule 81 (addOperand -> .)
    LEFTBRACE       reduce using rule 81 (addOperand -> .)

    addOperand                     shift and go to state 137

state 104

    (79) factor -> module .

    MULTIPLY        reduce using rule 79 (factor -> module .)
    DIVIDE          reduce using rule 79 (factor -> module .)
    PLUS            reduce using rule 79 (factor -> module .)
    MINUS           reduce using rule 79 (factor -> module .)
    GT              reduce using rule 79 (factor -> module .)
    LT              reduce using rule 79 (factor -> module .)
    NOTEQUAL        reduce using rule 79 (factor -> module .)
    ISEQUAL         reduce using rule 79 (factor -> module .)
    EXCLAMATION     reduce using rule 79 (factor -> module .)
    QUESTION        reduce using rule 79 (factor -> module .)
    DOLLARSIGN      reduce using rule 79 (factor -> module .)
    AND             reduce using rule 79 (factor -> module .)
    OR              reduce using rule 79 (factor -> module .)
    RIGHTPAR        reduce using rule 79 (factor -> module .)
    COMA            reduce using rule 79 (factor -> module .)
    SEMICOLON       reduce using rule 79 (factor -> module .)
    LEFTBRACE       reduce using rule 79 (factor -> module .)


state 105

    (80) factor -> ID . addOperand addTypeId
    (96) module -> ID . LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (81) addOperand -> .

    LEFTPAR         shift and go to state 88
    MULTIPLY        reduce using rule 81 (addOperand -> .)
    DIVIDE          reduce using rule 81 (addOperand -> .)
    PLUS            reduce using rule 81 (addOperand -> .)
    MINUS           reduce using rule 81 (addOperand -> .)
    GT              reduce using rule 81 (addOperand -> .)
    LT              reduce using rule 81 (addOperand -> .)
    NOTEQUAL        reduce using rule 81 (addOperand -> .)
    ISEQUAL         reduce using rule 81 (addOperand -> .)
    EXCLAMATION     reduce using rule 81 (addOperand -> .)
    QUESTION        reduce using rule 81 (addOperand -> .)
    DOLLARSIGN      reduce using rule 81 (addOperand -> .)
    AND             reduce using rule 81 (addOperand -> .)
    OR              reduce using rule 81 (addOperand -> .)
    RIGHTPAR        reduce using rule 81 (addOperand -> .)
    COMA            reduce using rule 81 (addOperand -> .)
    SEMICOLON       reduce using rule 81 (addOperand -> .)
    LEFTBRACE       reduce using rule 81 (addOperand -> .)

    addOperand                     shift and go to state 138

state 106

    (40) cst_PDT -> CST_INT . cstprimA1
    (43) cstprimA1 -> .

    MULTIPLY        reduce using rule 43 (cstprimA1 -> .)
    DIVIDE          reduce using rule 43 (cstprimA1 -> .)
    PLUS            reduce using rule 43 (cstprimA1 -> .)
    MINUS           reduce using rule 43 (cstprimA1 -> .)
    GT              reduce using rule 43 (cstprimA1 -> .)
    LT              reduce using rule 43 (cstprimA1 -> .)
    NOTEQUAL        reduce using rule 43 (cstprimA1 -> .)
    ISEQUAL         reduce using rule 43 (cstprimA1 -> .)
    EXCLAMATION     reduce using rule 43 (cstprimA1 -> .)
    QUESTION        reduce using rule 43 (cstprimA1 -> .)
    DOLLARSIGN      reduce using rule 43 (cstprimA1 -> .)
    AND             reduce using rule 43 (cstprimA1 -> .)
    OR              reduce using rule 43 (cstprimA1 -> .)
    RIGHTPAR        reduce using rule 43 (cstprimA1 -> .)
    COMA            reduce using rule 43 (cstprimA1 -> .)
    SEMICOLON       reduce using rule 43 (cstprimA1 -> .)
    LEFTBRACE       reduce using rule 43 (cstprimA1 -> .)

    cstprimA1                      shift and go to state 139

state 107

    (41) cst_PDT -> CST_FLOAT . cstprimA2
    (44) cstprimA2 -> .

    MULTIPLY        reduce using rule 44 (cstprimA2 -> .)
    DIVIDE          reduce using rule 44 (cstprimA2 -> .)
    PLUS            reduce using rule 44 (cstprimA2 -> .)
    MINUS           reduce using rule 44 (cstprimA2 -> .)
    GT              reduce using rule 44 (cstprimA2 -> .)
    LT              reduce using rule 44 (cstprimA2 -> .)
    NOTEQUAL        reduce using rule 44 (cstprimA2 -> .)
    ISEQUAL         reduce using rule 44 (cstprimA2 -> .)
    EXCLAMATION     reduce using rule 44 (cstprimA2 -> .)
    QUESTION        reduce using rule 44 (cstprimA2 -> .)
    DOLLARSIGN      reduce using rule 44 (cstprimA2 -> .)
    AND             reduce using rule 44 (cstprimA2 -> .)
    OR              reduce using rule 44 (cstprimA2 -> .)
    RIGHTPAR        reduce using rule 44 (cstprimA2 -> .)
    COMA            reduce using rule 44 (cstprimA2 -> .)
    SEMICOLON       reduce using rule 44 (cstprimA2 -> .)
    LEFTBRACE       reduce using rule 44 (cstprimA2 -> .)

    cstprimA2                      shift and go to state 140

state 108

    (42) cst_PDT -> CST_CHAR . cstprimA3
    (45) cstprimA3 -> .

    MULTIPLY        reduce using rule 45 (cstprimA3 -> .)
    DIVIDE          reduce using rule 45 (cstprimA3 -> .)
    PLUS            reduce using rule 45 (cstprimA3 -> .)
    MINUS           reduce using rule 45 (cstprimA3 -> .)
    GT              reduce using rule 45 (cstprimA3 -> .)
    LT              reduce using rule 45 (cstprimA3 -> .)
    NOTEQUAL        reduce using rule 45 (cstprimA3 -> .)
    ISEQUAL         reduce using rule 45 (cstprimA3 -> .)
    EXCLAMATION     reduce using rule 45 (cstprimA3 -> .)
    QUESTION        reduce using rule 45 (cstprimA3 -> .)
    DOLLARSIGN      reduce using rule 45 (cstprimA3 -> .)
    AND             reduce using rule 45 (cstprimA3 -> .)
    OR              reduce using rule 45 (cstprimA3 -> .)
    RIGHTPAR        reduce using rule 45 (cstprimA3 -> .)
    COMA            reduce using rule 45 (cstprimA3 -> .)
    SEMICOLON       reduce using rule 45 (cstprimA3 -> .)
    LEFTBRACE       reduce using rule 45 (cstprimA3 -> .)

    cstprimA3                      shift and go to state 141

state 109

    (17) if -> IF LEFTPAR Expression2 . RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse

    RIGHTPAR        shift and go to state 142


state 110

    (83) read -> READ LEFTPAR id_list . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 143


state 111

    (84) id_list -> ID . addRead id_listFunction
    (87) addRead -> .

    COMA            reduce using rule 87 (addRead -> .)
    RIGHTPAR        reduce using rule 87 (addRead -> .)

    addRead                        shift and go to state 144

state 112

    (88) print -> PRINT LEFTPAR printFunction . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 145


state 113

    (89) printFunction -> print_param . COMA printFunction2
    (90) printFunction -> print_param .

    COMA            shift and go to state 146
    RIGHTPAR        reduce using rule 90 (printFunction -> print_param .)


state 114

    (93) print_param -> Expression2 . addPrint
    (92) addPrint -> .

    COMA            reduce using rule 92 (addPrint -> .)
    RIGHTPAR        reduce using rule 92 (addPrint -> .)

    addPrint                       shift and go to state 147

state 115

    (94) print_param -> CST_STRING . addPrintString
    (95) addPrintString -> .

    COMA            reduce using rule 95 (addPrintString -> .)
    RIGHTPAR        reduce using rule 95 (addPrintString -> .)

    addPrintString                 shift and go to state 148

state 116

    (9) assignment -> ID EQUAL Expression2 . SEMICOLON

    SEMICOLON       shift and go to state 149


state 117

    (108) moduleFunction -> ID . COMA moduleFunction
    (80) factor -> ID . addOperand addTypeId
    (96) module -> ID . LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (81) addOperand -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 150
    LEFTPAR         shift and go to state 88
    MULTIPLY        reduce using rule 81 (addOperand -> .)
    DIVIDE          reduce using rule 81 (addOperand -> .)
    PLUS            reduce using rule 81 (addOperand -> .)
    MINUS           reduce using rule 81 (addOperand -> .)
    GT              reduce using rule 81 (addOperand -> .)
    LT              reduce using rule 81 (addOperand -> .)
    NOTEQUAL        reduce using rule 81 (addOperand -> .)
    ISEQUAL         reduce using rule 81 (addOperand -> .)
    EXCLAMATION     reduce using rule 81 (addOperand -> .)
    QUESTION        reduce using rule 81 (addOperand -> .)
    DOLLARSIGN      reduce using rule 81 (addOperand -> .)
    AND             reduce using rule 81 (addOperand -> .)
    OR              reduce using rule 81 (addOperand -> .)
    RIGHTPAR        reduce using rule 81 (addOperand -> .)

  ! COMA            [ reduce using rule 81 (addOperand -> .) ]

    addOperand                     shift and go to state 138

state 118

    (96) module -> ID LEFTPAR moduleFunction . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 151


state 119

    (109) moduleFunction -> Expression2 . COMA moduleFunction
    (110) moduleFunction -> Expression2 . RIGHTPAR

    COMA            shift and go to state 152
    RIGHTPAR        shift and go to state 153


state 120

    (20) for -> FOR forDeclaration TO . Expression2 LEFTBRACE statement RIGHTBRACE
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 154
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 121

    (21) forDeclaration -> ID EQUAL . CST_INT

    CST_INT         shift and go to state 155


state 122

    (23) while -> WHILE LEFTPAR Expression2 . RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTPAR        shift and go to state 156


state 123

    (32) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 157


state 124

    (33) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .

    FUNCTION        reduce using rule 33 (function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)
    MAIN            reduce using rule 33 (function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)


state 125

    (35) functionParam -> COMA param .

    RIGHTPAR        reduce using rule 35 (functionParam -> COMA param .)


state 126

    (28) varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .

    COMA            reduce using rule 28 (varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .)
    SEMICOLON       reduce using rule 28 (varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .)


state 127

    (77) factor -> LEFTPAR Expression2 . RIGHTPAR

    RIGHTPAR        shift and go to state 158


state 128

    (16) return -> RETURN LEFTPAR Expression2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 159


state 129

    (47) Expression2 -> Expression3 Exp2A1 . Expression22 Expression2Nested
    (49) Expression2 -> Expression3 Exp2A1 .
    (53) Expression22 -> . AND addOperator
    (54) Expression22 -> . OR addOperator

    RIGHTPAR        reduce using rule 49 (Expression2 -> Expression3 Exp2A1 .)
    COMA            reduce using rule 49 (Expression2 -> Expression3 Exp2A1 .)
    SEMICOLON       reduce using rule 49 (Expression2 -> Expression3 Exp2A1 .)
    LEFTBRACE       reduce using rule 49 (Expression2 -> Expression3 Exp2A1 .)
    AND             shift and go to state 161
    OR              shift and go to state 162

    Expression22                   shift and go to state 160

state 130

    (48) Expression2 -> Expression3 opMatrix .

    RIGHTPAR        reduce using rule 48 (Expression2 -> Expression3 opMatrix .)
    COMA            reduce using rule 48 (Expression2 -> Expression3 opMatrix .)
    SEMICOLON       reduce using rule 48 (Expression2 -> Expression3 opMatrix .)
    LEFTBRACE       reduce using rule 48 (Expression2 -> Expression3 opMatrix .)


state 131

    (62) opMatrix -> EXCLAMATION . addOperator
    (76) addOperator -> .

    RIGHTPAR        reduce using rule 76 (addOperator -> .)
    COMA            reduce using rule 76 (addOperator -> .)
    SEMICOLON       reduce using rule 76 (addOperator -> .)
    LEFTBRACE       reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 163

state 132

    (63) opMatrix -> QUESTION . addOperator
    (76) addOperator -> .

    RIGHTPAR        reduce using rule 76 (addOperator -> .)
    COMA            reduce using rule 76 (addOperator -> .)
    SEMICOLON       reduce using rule 76 (addOperator -> .)
    LEFTBRACE       reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 164

state 133

    (64) opMatrix -> DOLLARSIGN . addOperator
    (76) addOperator -> .

    RIGHTPAR        reduce using rule 76 (addOperator -> .)
    COMA            reduce using rule 76 (addOperator -> .)
    SEMICOLON       reduce using rule 76 (addOperator -> .)
    LEFTBRACE       reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 165

state 134

    (55) Expression3 -> exp Exp3A1 . Expression33 exp Exp3A1
    (56) Expression3 -> exp Exp3A1 .
    (57) Expression33 -> . GT addOperator
    (58) Expression33 -> . LT addOperator
    (59) Expression33 -> . NOTEQUAL addOperator
    (60) Expression33 -> . ISEQUAL addOperator

    EXCLAMATION     reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    QUESTION        reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    DOLLARSIGN      reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    AND             reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    OR              reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    RIGHTPAR        reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    COMA            reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    SEMICOLON       reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    LEFTBRACE       reduce using rule 56 (Expression3 -> exp Exp3A1 .)
    GT              shift and go to state 167
    LT              shift and go to state 168
    NOTEQUAL        shift and go to state 169
    ISEQUAL         shift and go to state 170

    Expression33                   shift and go to state 166

state 135

    (65) exp -> term termA1 . expFunction
    (66) exp -> term termA1 .
    (68) expFunction -> . PLUS addOperator exp
    (69) expFunction -> . MINUS addOperator exp

    GT              reduce using rule 66 (exp -> term termA1 .)
    LT              reduce using rule 66 (exp -> term termA1 .)
    NOTEQUAL        reduce using rule 66 (exp -> term termA1 .)
    ISEQUAL         reduce using rule 66 (exp -> term termA1 .)
    EXCLAMATION     reduce using rule 66 (exp -> term termA1 .)
    QUESTION        reduce using rule 66 (exp -> term termA1 .)
    DOLLARSIGN      reduce using rule 66 (exp -> term termA1 .)
    AND             reduce using rule 66 (exp -> term termA1 .)
    OR              reduce using rule 66 (exp -> term termA1 .)
    RIGHTPAR        reduce using rule 66 (exp -> term termA1 .)
    COMA            reduce using rule 66 (exp -> term termA1 .)
    SEMICOLON       reduce using rule 66 (exp -> term termA1 .)
    LEFTBRACE       reduce using rule 66 (exp -> term termA1 .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173

    expFunction                    shift and go to state 171

state 136

    (71) term -> factor factorA1 . termFunction
    (72) term -> factor factorA1 .
    (74) termFunction -> . MULTIPLY addOperator term
    (75) termFunction -> . DIVIDE addOperator term

    PLUS            reduce using rule 72 (term -> factor factorA1 .)
    MINUS           reduce using rule 72 (term -> factor factorA1 .)
    GT              reduce using rule 72 (term -> factor factorA1 .)
    LT              reduce using rule 72 (term -> factor factorA1 .)
    NOTEQUAL        reduce using rule 72 (term -> factor factorA1 .)
    ISEQUAL         reduce using rule 72 (term -> factor factorA1 .)
    EXCLAMATION     reduce using rule 72 (term -> factor factorA1 .)
    QUESTION        reduce using rule 72 (term -> factor factorA1 .)
    DOLLARSIGN      reduce using rule 72 (term -> factor factorA1 .)
    AND             reduce using rule 72 (term -> factor factorA1 .)
    OR              reduce using rule 72 (term -> factor factorA1 .)
    RIGHTPAR        reduce using rule 72 (term -> factor factorA1 .)
    COMA            reduce using rule 72 (term -> factor factorA1 .)
    SEMICOLON       reduce using rule 72 (term -> factor factorA1 .)
    LEFTBRACE       reduce using rule 72 (term -> factor factorA1 .)
    MULTIPLY        shift and go to state 175
    DIVIDE          shift and go to state 176

    termFunction                   shift and go to state 174

state 137

    (78) factor -> cst_PDT addOperand .

    MULTIPLY        reduce using rule 78 (factor -> cst_PDT addOperand .)
    DIVIDE          reduce using rule 78 (factor -> cst_PDT addOperand .)
    PLUS            reduce using rule 78 (factor -> cst_PDT addOperand .)
    MINUS           reduce using rule 78 (factor -> cst_PDT addOperand .)
    GT              reduce using rule 78 (factor -> cst_PDT addOperand .)
    LT              reduce using rule 78 (factor -> cst_PDT addOperand .)
    NOTEQUAL        reduce using rule 78 (factor -> cst_PDT addOperand .)
    ISEQUAL         reduce using rule 78 (factor -> cst_PDT addOperand .)
    EXCLAMATION     reduce using rule 78 (factor -> cst_PDT addOperand .)
    QUESTION        reduce using rule 78 (factor -> cst_PDT addOperand .)
    DOLLARSIGN      reduce using rule 78 (factor -> cst_PDT addOperand .)
    AND             reduce using rule 78 (factor -> cst_PDT addOperand .)
    OR              reduce using rule 78 (factor -> cst_PDT addOperand .)
    RIGHTPAR        reduce using rule 78 (factor -> cst_PDT addOperand .)
    COMA            reduce using rule 78 (factor -> cst_PDT addOperand .)
    SEMICOLON       reduce using rule 78 (factor -> cst_PDT addOperand .)
    LEFTBRACE       reduce using rule 78 (factor -> cst_PDT addOperand .)


state 138

    (80) factor -> ID addOperand . addTypeId
    (82) addTypeId -> .

    MULTIPLY        reduce using rule 82 (addTypeId -> .)
    DIVIDE          reduce using rule 82 (addTypeId -> .)
    PLUS            reduce using rule 82 (addTypeId -> .)
    MINUS           reduce using rule 82 (addTypeId -> .)
    GT              reduce using rule 82 (addTypeId -> .)
    LT              reduce using rule 82 (addTypeId -> .)
    NOTEQUAL        reduce using rule 82 (addTypeId -> .)
    ISEQUAL         reduce using rule 82 (addTypeId -> .)
    EXCLAMATION     reduce using rule 82 (addTypeId -> .)
    QUESTION        reduce using rule 82 (addTypeId -> .)
    DOLLARSIGN      reduce using rule 82 (addTypeId -> .)
    AND             reduce using rule 82 (addTypeId -> .)
    OR              reduce using rule 82 (addTypeId -> .)
    RIGHTPAR        reduce using rule 82 (addTypeId -> .)
    COMA            reduce using rule 82 (addTypeId -> .)
    SEMICOLON       reduce using rule 82 (addTypeId -> .)
    LEFTBRACE       reduce using rule 82 (addTypeId -> .)

    addTypeId                      shift and go to state 177

state 139

    (40) cst_PDT -> CST_INT cstprimA1 .

    MULTIPLY        reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    DIVIDE          reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    PLUS            reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    MINUS           reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    GT              reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    LT              reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    NOTEQUAL        reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    ISEQUAL         reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    EXCLAMATION     reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    QUESTION        reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    DOLLARSIGN      reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    AND             reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    OR              reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    RIGHTPAR        reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    COMA            reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    SEMICOLON       reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)
    LEFTBRACE       reduce using rule 40 (cst_PDT -> CST_INT cstprimA1 .)


state 140

    (41) cst_PDT -> CST_FLOAT cstprimA2 .

    MULTIPLY        reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    DIVIDE          reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    PLUS            reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    MINUS           reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    GT              reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    LT              reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    NOTEQUAL        reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    ISEQUAL         reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    EXCLAMATION     reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    QUESTION        reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    DOLLARSIGN      reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    AND             reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    OR              reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    RIGHTPAR        reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    COMA            reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    SEMICOLON       reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)
    LEFTBRACE       reduce using rule 41 (cst_PDT -> CST_FLOAT cstprimA2 .)


state 141

    (42) cst_PDT -> CST_CHAR cstprimA3 .

    MULTIPLY        reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    DIVIDE          reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    PLUS            reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    MINUS           reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    GT              reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    LT              reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    NOTEQUAL        reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    ISEQUAL         reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    EXCLAMATION     reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    QUESTION        reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    DOLLARSIGN      reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    AND             reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    OR              reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    RIGHTPAR        reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    COMA            reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    SEMICOLON       reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)
    LEFTBRACE       reduce using rule 42 (cst_PDT -> CST_CHAR cstprimA3 .)


state 142

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR . THEN LEFTBRACE statement RIGHTBRACE ifElse

    THEN            shift and go to state 178


state 143

    (83) read -> READ LEFTPAR id_list RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 179


state 144

    (84) id_list -> ID addRead . id_listFunction
    (85) id_listFunction -> . COMA id_list
    (86) id_listFunction -> .

    COMA            shift and go to state 181
    RIGHTPAR        reduce using rule 86 (id_listFunction -> .)

    id_listFunction                shift and go to state 180

state 145

    (88) print -> PRINT LEFTPAR printFunction RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 182


state 146

    (89) printFunction -> print_param COMA . printFunction2
    (91) printFunction2 -> . printFunction
    (89) printFunction -> . print_param COMA printFunction2
    (90) printFunction -> . print_param
    (93) print_param -> . Expression2 addPrint
    (94) print_param -> . CST_STRING addPrintString
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    CST_STRING      shift and go to state 115
    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    print_param                    shift and go to state 113
    printFunction2                 shift and go to state 183
    printFunction                  shift and go to state 184
    Expression2                    shift and go to state 114
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 147

    (93) print_param -> Expression2 addPrint .

    COMA            reduce using rule 93 (print_param -> Expression2 addPrint .)
    RIGHTPAR        reduce using rule 93 (print_param -> Expression2 addPrint .)


state 148

    (94) print_param -> CST_STRING addPrintString .

    COMA            reduce using rule 94 (print_param -> CST_STRING addPrintString .)
    RIGHTPAR        reduce using rule 94 (print_param -> CST_STRING addPrintString .)


state 149

    (9) assignment -> ID EQUAL Expression2 SEMICOLON .

    RETURN          reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    IF              reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    COMMENT_TEXT    reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    READ            reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    PRINT           reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    ID              reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    VAR             reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    FOR             reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    WHILE           reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    RIGHTBRACE      reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)


state 150

    (108) moduleFunction -> ID COMA . moduleFunction
    (108) moduleFunction -> . ID COMA moduleFunction
    (109) moduleFunction -> . Expression2 COMA moduleFunction
    (110) moduleFunction -> . Expression2 RIGHTPAR
    (111) moduleFunction -> .
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    ID              shift and go to state 117
    RIGHTPAR        reduce using rule 111 (moduleFunction -> .)
    LEFTPAR         shift and go to state 97
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    moduleFunction                 shift and go to state 185
    Expression2                    shift and go to state 119
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 151

    (96) module -> ID LEFTPAR moduleFunction RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 186


state 152

    (109) moduleFunction -> Expression2 COMA . moduleFunction
    (108) moduleFunction -> . ID COMA moduleFunction
    (109) moduleFunction -> . Expression2 COMA moduleFunction
    (110) moduleFunction -> . Expression2 RIGHTPAR
    (111) moduleFunction -> .
    (47) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (48) Expression2 -> . Expression3 opMatrix
    (49) Expression2 -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    ID              shift and go to state 117
    RIGHTPAR        reduce using rule 111 (moduleFunction -> .)
    LEFTPAR         shift and go to state 97
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 119
    moduleFunction                 shift and go to state 187
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 153

    (110) moduleFunction -> Expression2 RIGHTPAR .

    RIGHTPAR        reduce using rule 110 (moduleFunction -> Expression2 RIGHTPAR .)


state 154

    (20) for -> FOR forDeclaration TO Expression2 . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 188


state 155

    (21) forDeclaration -> ID EQUAL CST_INT .

    TO              reduce using rule 21 (forDeclaration -> ID EQUAL CST_INT .)


state 156

    (23) while -> WHILE LEFTPAR Expression2 RIGHTPAR . LEFTBRACE DO statement RIGHTBRACE

    LEFTBRACE       shift and go to state 189


state 157

    (32) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .

    FUNCTION        reduce using rule 32 (function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)
    MAIN            reduce using rule 32 (function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)


state 158

    (77) factor -> LEFTPAR Expression2 RIGHTPAR .

    MULTIPLY        reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    DIVIDE          reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    PLUS            reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    MINUS           reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    GT              reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    LT              reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    NOTEQUAL        reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    ISEQUAL         reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    EXCLAMATION     reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    QUESTION        reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    DOLLARSIGN      reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    AND             reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    OR              reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    RIGHTPAR        reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    COMA            reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    SEMICOLON       reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    LEFTBRACE       reduce using rule 77 (factor -> LEFTPAR Expression2 RIGHTPAR .)


state 159

    (16) return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON .

    RIGHTBRACE      reduce using rule 16 (return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON .)


state 160

    (47) Expression2 -> Expression3 Exp2A1 Expression22 . Expression2Nested
    (50) Expression2Nested -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2Nested -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression3                    shift and go to state 190
    Expression2Nested              shift and go to state 191
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 161

    (53) Expression22 -> AND . addOperator
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 192

state 162

    (54) Expression22 -> OR . addOperator
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 193

state 163

    (62) opMatrix -> EXCLAMATION addOperator .

    RIGHTPAR        reduce using rule 62 (opMatrix -> EXCLAMATION addOperator .)
    COMA            reduce using rule 62 (opMatrix -> EXCLAMATION addOperator .)
    SEMICOLON       reduce using rule 62 (opMatrix -> EXCLAMATION addOperator .)
    LEFTBRACE       reduce using rule 62 (opMatrix -> EXCLAMATION addOperator .)


state 164

    (63) opMatrix -> QUESTION addOperator .

    RIGHTPAR        reduce using rule 63 (opMatrix -> QUESTION addOperator .)
    COMA            reduce using rule 63 (opMatrix -> QUESTION addOperator .)
    SEMICOLON       reduce using rule 63 (opMatrix -> QUESTION addOperator .)
    LEFTBRACE       reduce using rule 63 (opMatrix -> QUESTION addOperator .)


state 165

    (64) opMatrix -> DOLLARSIGN addOperator .

    RIGHTPAR        reduce using rule 64 (opMatrix -> DOLLARSIGN addOperator .)
    COMA            reduce using rule 64 (opMatrix -> DOLLARSIGN addOperator .)
    SEMICOLON       reduce using rule 64 (opMatrix -> DOLLARSIGN addOperator .)
    LEFTBRACE       reduce using rule 64 (opMatrix -> DOLLARSIGN addOperator .)


state 166

    (55) Expression3 -> exp Exp3A1 Expression33 . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    exp                            shift and go to state 194
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 167

    (57) Expression33 -> GT . addOperator
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 195

state 168

    (58) Expression33 -> LT . addOperator
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 196

state 169

    (59) Expression33 -> NOTEQUAL . addOperator
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 197

state 170

    (60) Expression33 -> ISEQUAL . addOperator
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 198

state 171

    (65) exp -> term termA1 expFunction .

    GT              reduce using rule 65 (exp -> term termA1 expFunction .)
    LT              reduce using rule 65 (exp -> term termA1 expFunction .)
    NOTEQUAL        reduce using rule 65 (exp -> term termA1 expFunction .)
    ISEQUAL         reduce using rule 65 (exp -> term termA1 expFunction .)
    EXCLAMATION     reduce using rule 65 (exp -> term termA1 expFunction .)
    QUESTION        reduce using rule 65 (exp -> term termA1 expFunction .)
    DOLLARSIGN      reduce using rule 65 (exp -> term termA1 expFunction .)
    AND             reduce using rule 65 (exp -> term termA1 expFunction .)
    OR              reduce using rule 65 (exp -> term termA1 expFunction .)
    RIGHTPAR        reduce using rule 65 (exp -> term termA1 expFunction .)
    COMA            reduce using rule 65 (exp -> term termA1 expFunction .)
    SEMICOLON       reduce using rule 65 (exp -> term termA1 expFunction .)
    LEFTBRACE       reduce using rule 65 (exp -> term termA1 expFunction .)


state 172

    (68) expFunction -> PLUS . addOperator exp
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 199

state 173

    (69) expFunction -> MINUS . addOperator exp
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 200

state 174

    (71) term -> factor factorA1 termFunction .

    PLUS            reduce using rule 71 (term -> factor factorA1 termFunction .)
    MINUS           reduce using rule 71 (term -> factor factorA1 termFunction .)
    GT              reduce using rule 71 (term -> factor factorA1 termFunction .)
    LT              reduce using rule 71 (term -> factor factorA1 termFunction .)
    NOTEQUAL        reduce using rule 71 (term -> factor factorA1 termFunction .)
    ISEQUAL         reduce using rule 71 (term -> factor factorA1 termFunction .)
    EXCLAMATION     reduce using rule 71 (term -> factor factorA1 termFunction .)
    QUESTION        reduce using rule 71 (term -> factor factorA1 termFunction .)
    DOLLARSIGN      reduce using rule 71 (term -> factor factorA1 termFunction .)
    AND             reduce using rule 71 (term -> factor factorA1 termFunction .)
    OR              reduce using rule 71 (term -> factor factorA1 termFunction .)
    RIGHTPAR        reduce using rule 71 (term -> factor factorA1 termFunction .)
    COMA            reduce using rule 71 (term -> factor factorA1 termFunction .)
    SEMICOLON       reduce using rule 71 (term -> factor factorA1 termFunction .)
    LEFTBRACE       reduce using rule 71 (term -> factor factorA1 termFunction .)


state 175

    (74) termFunction -> MULTIPLY . addOperator term
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 201

state 176

    (75) termFunction -> DIVIDE . addOperator term
    (76) addOperator -> .

    LEFTPAR         reduce using rule 76 (addOperator -> .)
    ID              reduce using rule 76 (addOperator -> .)
    CST_INT         reduce using rule 76 (addOperator -> .)
    CST_FLOAT       reduce using rule 76 (addOperator -> .)
    CST_CHAR        reduce using rule 76 (addOperator -> .)

    addOperator                    shift and go to state 202

state 177

    (80) factor -> ID addOperand addTypeId .

    MULTIPLY        reduce using rule 80 (factor -> ID addOperand addTypeId .)
    DIVIDE          reduce using rule 80 (factor -> ID addOperand addTypeId .)
    PLUS            reduce using rule 80 (factor -> ID addOperand addTypeId .)
    MINUS           reduce using rule 80 (factor -> ID addOperand addTypeId .)
    GT              reduce using rule 80 (factor -> ID addOperand addTypeId .)
    LT              reduce using rule 80 (factor -> ID addOperand addTypeId .)
    NOTEQUAL        reduce using rule 80 (factor -> ID addOperand addTypeId .)
    ISEQUAL         reduce using rule 80 (factor -> ID addOperand addTypeId .)
    EXCLAMATION     reduce using rule 80 (factor -> ID addOperand addTypeId .)
    QUESTION        reduce using rule 80 (factor -> ID addOperand addTypeId .)
    DOLLARSIGN      reduce using rule 80 (factor -> ID addOperand addTypeId .)
    AND             reduce using rule 80 (factor -> ID addOperand addTypeId .)
    OR              reduce using rule 80 (factor -> ID addOperand addTypeId .)
    RIGHTPAR        reduce using rule 80 (factor -> ID addOperand addTypeId .)
    COMA            reduce using rule 80 (factor -> ID addOperand addTypeId .)
    SEMICOLON       reduce using rule 80 (factor -> ID addOperand addTypeId .)
    LEFTBRACE       reduce using rule 80 (factor -> ID addOperand addTypeId .)


state 178

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR THEN . LEFTBRACE statement RIGHTBRACE ifElse

    LEFTBRACE       shift and go to state 203


state 179

    (83) read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .

    RETURN          reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    IF              reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    COMMENT_TEXT    reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    READ            reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    PRINT           reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    ID              reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    VAR             reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    RIGHTBRACE      reduce using rule 83 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)


state 180

    (84) id_list -> ID addRead id_listFunction .

    RIGHTPAR        reduce using rule 84 (id_list -> ID addRead id_listFunction .)


state 181

    (85) id_listFunction -> COMA . id_list
    (84) id_list -> . ID addRead id_listFunction

    ID              shift and go to state 111

    id_list                        shift and go to state 204

state 182

    (88) print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .

    RETURN          reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    IF              reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    COMMENT_TEXT    reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    READ            reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    PRINT           reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    ID              reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    VAR             reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    RIGHTBRACE      reduce using rule 88 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)


state 183

    (89) printFunction -> print_param COMA printFunction2 .

    RIGHTPAR        reduce using rule 89 (printFunction -> print_param COMA printFunction2 .)


state 184

    (91) printFunction2 -> printFunction .

    RIGHTPAR        reduce using rule 91 (printFunction2 -> printFunction .)


state 185

    (108) moduleFunction -> ID COMA moduleFunction .

    RIGHTPAR        reduce using rule 108 (moduleFunction -> ID COMA moduleFunction .)


state 186

    (96) module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .

    RETURN          reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    IF              reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    COMMENT_TEXT    reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    READ            reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    PRINT           reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    ID              reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    VAR             reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    RIGHTBRACE      reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    MULTIPLY        reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    DIVIDE          reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    PLUS            reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    MINUS           reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    GT              reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    LT              reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    NOTEQUAL        reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    ISEQUAL         reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    EXCLAMATION     reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    QUESTION        reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    DOLLARSIGN      reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    AND             reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    OR              reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    RIGHTPAR        reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    COMA            reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    SEMICOLON       reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    LEFTBRACE       reduce using rule 96 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)


state 187

    (109) moduleFunction -> Expression2 COMA moduleFunction .

    RIGHTPAR        reduce using rule 109 (moduleFunction -> Expression2 COMA moduleFunction .)


state 188

    (20) for -> FOR forDeclaration TO Expression2 LEFTBRACE . statement RIGHTBRACE
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 205
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 189

    (23) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE . DO statement RIGHTBRACE

    DO              shift and go to state 206


state 190

    (50) Expression2Nested -> Expression3 . Exp2A1 Expression22 Expression2Nested
    (51) Expression2Nested -> Expression3 . Exp2A1
    (52) Exp2A1 -> .

    AND             reduce using rule 52 (Exp2A1 -> .)
    OR              reduce using rule 52 (Exp2A1 -> .)
    RIGHTPAR        reduce using rule 52 (Exp2A1 -> .)
    COMA            reduce using rule 52 (Exp2A1 -> .)
    SEMICOLON       reduce using rule 52 (Exp2A1 -> .)
    LEFTBRACE       reduce using rule 52 (Exp2A1 -> .)

    Exp2A1                         shift and go to state 207

state 191

    (47) Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .

    RIGHTPAR        reduce using rule 47 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    COMA            reduce using rule 47 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    SEMICOLON       reduce using rule 47 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    LEFTBRACE       reduce using rule 47 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)


state 192

    (53) Expression22 -> AND addOperator .

    LEFTPAR         reduce using rule 53 (Expression22 -> AND addOperator .)
    ID              reduce using rule 53 (Expression22 -> AND addOperator .)
    CST_INT         reduce using rule 53 (Expression22 -> AND addOperator .)
    CST_FLOAT       reduce using rule 53 (Expression22 -> AND addOperator .)
    CST_CHAR        reduce using rule 53 (Expression22 -> AND addOperator .)


state 193

    (54) Expression22 -> OR addOperator .

    LEFTPAR         reduce using rule 54 (Expression22 -> OR addOperator .)
    ID              reduce using rule 54 (Expression22 -> OR addOperator .)
    CST_INT         reduce using rule 54 (Expression22 -> OR addOperator .)
    CST_FLOAT       reduce using rule 54 (Expression22 -> OR addOperator .)
    CST_CHAR        reduce using rule 54 (Expression22 -> OR addOperator .)


state 194

    (55) Expression3 -> exp Exp3A1 Expression33 exp . Exp3A1
    (61) Exp3A1 -> .

    EXCLAMATION     reduce using rule 61 (Exp3A1 -> .)
    QUESTION        reduce using rule 61 (Exp3A1 -> .)
    DOLLARSIGN      reduce using rule 61 (Exp3A1 -> .)
    AND             reduce using rule 61 (Exp3A1 -> .)
    OR              reduce using rule 61 (Exp3A1 -> .)
    RIGHTPAR        reduce using rule 61 (Exp3A1 -> .)
    COMA            reduce using rule 61 (Exp3A1 -> .)
    SEMICOLON       reduce using rule 61 (Exp3A1 -> .)
    LEFTBRACE       reduce using rule 61 (Exp3A1 -> .)

    Exp3A1                         shift and go to state 208

state 195

    (57) Expression33 -> GT addOperator .

    LEFTPAR         reduce using rule 57 (Expression33 -> GT addOperator .)
    ID              reduce using rule 57 (Expression33 -> GT addOperator .)
    CST_INT         reduce using rule 57 (Expression33 -> GT addOperator .)
    CST_FLOAT       reduce using rule 57 (Expression33 -> GT addOperator .)
    CST_CHAR        reduce using rule 57 (Expression33 -> GT addOperator .)


state 196

    (58) Expression33 -> LT addOperator .

    LEFTPAR         reduce using rule 58 (Expression33 -> LT addOperator .)
    ID              reduce using rule 58 (Expression33 -> LT addOperator .)
    CST_INT         reduce using rule 58 (Expression33 -> LT addOperator .)
    CST_FLOAT       reduce using rule 58 (Expression33 -> LT addOperator .)
    CST_CHAR        reduce using rule 58 (Expression33 -> LT addOperator .)


state 197

    (59) Expression33 -> NOTEQUAL addOperator .

    LEFTPAR         reduce using rule 59 (Expression33 -> NOTEQUAL addOperator .)
    ID              reduce using rule 59 (Expression33 -> NOTEQUAL addOperator .)
    CST_INT         reduce using rule 59 (Expression33 -> NOTEQUAL addOperator .)
    CST_FLOAT       reduce using rule 59 (Expression33 -> NOTEQUAL addOperator .)
    CST_CHAR        reduce using rule 59 (Expression33 -> NOTEQUAL addOperator .)


state 198

    (60) Expression33 -> ISEQUAL addOperator .

    LEFTPAR         reduce using rule 60 (Expression33 -> ISEQUAL addOperator .)
    ID              reduce using rule 60 (Expression33 -> ISEQUAL addOperator .)
    CST_INT         reduce using rule 60 (Expression33 -> ISEQUAL addOperator .)
    CST_FLOAT       reduce using rule 60 (Expression33 -> ISEQUAL addOperator .)
    CST_CHAR        reduce using rule 60 (Expression33 -> ISEQUAL addOperator .)


state 199

    (68) expFunction -> PLUS addOperator . exp
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    exp                            shift and go to state 209
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 200

    (69) expFunction -> MINUS addOperator . exp
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    exp                            shift and go to state 210
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 201

    (74) termFunction -> MULTIPLY addOperator . term
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    term                           shift and go to state 211
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 202

    (75) termFunction -> DIVIDE addOperator . term
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    term                           shift and go to state 212
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 203

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE . statement RIGHTBRACE ifElse
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 213
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 204

    (85) id_listFunction -> COMA id_list .

    RIGHTPAR        reduce using rule 85 (id_listFunction -> COMA id_list .)


state 205

    (20) for -> FOR forDeclaration TO Expression2 LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 214


state 206

    (23) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO . statement RIGHTBRACE
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 215
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 207

    (50) Expression2Nested -> Expression3 Exp2A1 . Expression22 Expression2Nested
    (51) Expression2Nested -> Expression3 Exp2A1 .
    (53) Expression22 -> . AND addOperator
    (54) Expression22 -> . OR addOperator

    RIGHTPAR        reduce using rule 51 (Expression2Nested -> Expression3 Exp2A1 .)
    COMA            reduce using rule 51 (Expression2Nested -> Expression3 Exp2A1 .)
    SEMICOLON       reduce using rule 51 (Expression2Nested -> Expression3 Exp2A1 .)
    LEFTBRACE       reduce using rule 51 (Expression2Nested -> Expression3 Exp2A1 .)
    AND             shift and go to state 161
    OR              shift and go to state 162

    Expression22                   shift and go to state 216

state 208

    (55) Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .

    EXCLAMATION     reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    QUESTION        reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    DOLLARSIGN      reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    AND             reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    OR              reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    RIGHTPAR        reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    COMA            reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    SEMICOLON       reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    LEFTBRACE       reduce using rule 55 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)


state 209

    (68) expFunction -> PLUS addOperator exp .

    GT              reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    LT              reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    NOTEQUAL        reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    ISEQUAL         reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    EXCLAMATION     reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    QUESTION        reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    DOLLARSIGN      reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    AND             reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    OR              reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    RIGHTPAR        reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    COMA            reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    SEMICOLON       reduce using rule 68 (expFunction -> PLUS addOperator exp .)
    LEFTBRACE       reduce using rule 68 (expFunction -> PLUS addOperator exp .)


state 210

    (69) expFunction -> MINUS addOperator exp .

    GT              reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    LT              reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    NOTEQUAL        reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    ISEQUAL         reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    EXCLAMATION     reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    QUESTION        reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    DOLLARSIGN      reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    AND             reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    OR              reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    RIGHTPAR        reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    COMA            reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    SEMICOLON       reduce using rule 69 (expFunction -> MINUS addOperator exp .)
    LEFTBRACE       reduce using rule 69 (expFunction -> MINUS addOperator exp .)


state 211

    (74) termFunction -> MULTIPLY addOperator term .

    PLUS            reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    MINUS           reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    GT              reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    LT              reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    NOTEQUAL        reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    ISEQUAL         reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    EXCLAMATION     reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    QUESTION        reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    DOLLARSIGN      reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    AND             reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    OR              reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    RIGHTPAR        reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    COMA            reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    SEMICOLON       reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)
    LEFTBRACE       reduce using rule 74 (termFunction -> MULTIPLY addOperator term .)


state 212

    (75) termFunction -> DIVIDE addOperator term .

    PLUS            reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    MINUS           reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    GT              reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    LT              reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    NOTEQUAL        reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    ISEQUAL         reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    EXCLAMATION     reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    QUESTION        reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    DOLLARSIGN      reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    AND             reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    OR              reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    RIGHTPAR        reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    COMA            reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    SEMICOLON       reduce using rule 75 (termFunction -> DIVIDE addOperator term .)
    LEFTBRACE       reduce using rule 75 (termFunction -> DIVIDE addOperator term .)


state 213

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement . RIGHTBRACE ifElse

    RIGHTBRACE      shift and go to state 217


state 214

    (20) for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .

    RETURN          reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    IF              reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    READ            reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    PRINT           reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    ID              reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    VAR             reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    FOR             reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    WHILE           reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 20 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)


state 215

    (23) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 218


state 216

    (50) Expression2Nested -> Expression3 Exp2A1 Expression22 . Expression2Nested
    (50) Expression2Nested -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2Nested -> . Expression3 Exp2A1
    (55) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (56) Expression3 -> . exp Exp3A1
    (65) exp -> . term termA1 expFunction
    (66) exp -> . term termA1
    (71) term -> . factor factorA1 termFunction
    (72) term -> . factor factorA1
    (77) factor -> . LEFTPAR Expression2 RIGHTPAR
    (78) factor -> . cst_PDT addOperand
    (79) factor -> . module
    (80) factor -> . ID addOperand addTypeId
    (40) cst_PDT -> . CST_INT cstprimA1
    (41) cst_PDT -> . CST_FLOAT cstprimA2
    (42) cst_PDT -> . CST_CHAR cstprimA3
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression3                    shift and go to state 190
    Expression2Nested              shift and go to state 219
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 217

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE . ifElse
    (18) ifElse -> . ELSE LEFTBRACE statement RIGHTBRACE
    (19) ifElse -> .

    ELSE            shift and go to state 221
    RETURN          reduce using rule 19 (ifElse -> .)
    IF              reduce using rule 19 (ifElse -> .)
    COMMENT_TEXT    reduce using rule 19 (ifElse -> .)
    READ            reduce using rule 19 (ifElse -> .)
    PRINT           reduce using rule 19 (ifElse -> .)
    ID              reduce using rule 19 (ifElse -> .)
    VAR             reduce using rule 19 (ifElse -> .)
    FOR             reduce using rule 19 (ifElse -> .)
    WHILE           reduce using rule 19 (ifElse -> .)
    RIGHTBRACE      reduce using rule 19 (ifElse -> .)

    ifElse                         shift and go to state 220

state 218

    (23) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .

    RETURN          reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    IF              reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    READ            reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    PRINT           reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    ID              reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    VAR             reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    FOR             reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    WHILE           reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 23 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE .)


state 219

    (50) Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .

    RIGHTPAR        reduce using rule 50 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    COMA            reduce using rule 50 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    SEMICOLON       reduce using rule 50 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    LEFTBRACE       reduce using rule 50 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)


state 220

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .

    RETURN          reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    IF              reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    COMMENT_TEXT    reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    READ            reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    PRINT           reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    ID              reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    VAR             reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    FOR             reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    WHILE           reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)
    RIGHTBRACE      reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse .)


state 221

    (18) ifElse -> ELSE . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 222


state 222

    (18) ifElse -> ELSE LEFTBRACE . statement RIGHTBRACE
    (97) statement -> . return
    (98) statement -> . if statement
    (99) statement -> . comment statement
    (100) statement -> . read statement
    (101) statement -> . print statement
    (102) statement -> . assignment statement
    (103) statement -> . declaration statement
    (104) statement -> . module statement
    (105) statement -> . for statement
    (106) statement -> . while statement
    (107) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR THEN LEFTBRACE statement RIGHTBRACE ifElse
    (22) comment -> . COMMENT_TEXT
    (83) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (88) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (96) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (20) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (23) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE DO statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 107 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 223
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 223

    (18) ifElse -> ELSE LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 224


state 224

    (18) ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .

    RETURN          reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    IF              reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    READ            reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    PRINT           reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    ID              reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    VAR             reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    FOR             reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    WHILE           reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 18 (ifElse -> ELSE LEFTBRACE statement RIGHTBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMA in state 117 resolved as shift
