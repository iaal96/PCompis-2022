Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main
Rule 2     programA1 -> <empty>
Rule 3     main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE
Rule 4     mainA1 -> <empty>
Rule 5     programVars -> declaration
Rule 6     programVars -> <empty>
Rule 7     programFunc -> function programFunc
Rule 8     programFunc -> <empty>
Rule 9     assignment -> ID EQUAL Expression2 SEMICOLON
Rule 10    declaration -> VAR declarationPDT
Rule 11    declarationPDT -> PDT vars SEMICOLON declarationPDT
Rule 12    declarationPDT -> <empty>
Rule 13    PDT -> INT
Rule 14    PDT -> FLOAT
Rule 15    PDT -> CHAR
Rule 16    return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
Rule 17    if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
Rule 18    createJQif -> <empty>
Rule 19    updateJQ -> <empty>
Rule 20    ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE
Rule 21    ifElse -> <empty>
Rule 22    createJQelse -> <empty>
Rule 23    for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
Rule 24    forDeclaration -> ID EQUAL CST_INT
Rule 25    comment -> COMMENT_TEXT
Rule 26    while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE
Rule 27    vars -> ID varsA1 varsArray varsComa
Rule 28    varsA1 -> <empty>
Rule 29    varsComa -> COMA vars
Rule 30    varsComa -> <empty>
Rule 31    varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK
Rule 32    varsMatrix -> <empty>
Rule 33    varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix
Rule 34    varsArray -> <empty>
Rule 35    function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
Rule 36    function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
Rule 37    param -> PDT ID paramA1 functionParam
Rule 38    functionParam -> COMA param
Rule 39    functionParam -> <empty>
Rule 40    paramA1 -> <empty>
Rule 41    functionType -> FUNCTION PDT
Rule 42    functionType -> FUNCTION VOID functionTypeA1
Rule 43    cst_PDT -> CST_INT cstprimA1
Rule 44    cst_PDT -> CST_FLOAT cstprimA2
Rule 45    cst_PDT -> CST_CHAR cstprimA3
Rule 46    cstprimA1 -> <empty>
Rule 47    cstprimA2 -> <empty>
Rule 48    cstprimA3 -> <empty>
Rule 49    functionA1 -> <empty>
Rule 50    Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested
Rule 51    Expression2 -> Expression3 opMatrix
Rule 52    Expression2 -> Expression3 Exp2A1
Rule 53    Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested
Rule 54    Expression2Nested -> Expression3 Exp2A1
Rule 55    Exp2A1 -> <empty>
Rule 56    Expression22 -> AND addOperator
Rule 57    Expression22 -> OR addOperator
Rule 58    Expression3 -> exp Exp3A1 Expression33 exp Exp3A1
Rule 59    Expression3 -> exp Exp3A1
Rule 60    Expression33 -> GT addOperator
Rule 61    Expression33 -> LT addOperator
Rule 62    Expression33 -> NOTEQUAL addOperator
Rule 63    Expression33 -> ISEQUAL addOperator
Rule 64    Exp3A1 -> <empty>
Rule 65    opMatrix -> EXCLAMATION addOperator
Rule 66    opMatrix -> QUESTION addOperator
Rule 67    opMatrix -> DOLLARSIGN addOperator
Rule 68    exp -> term termA1 expFunction
Rule 69    exp -> term termA1
Rule 70    termA1 -> <empty>
Rule 71    expFunction -> PLUS addOperator exp
Rule 72    expFunction -> MINUS addOperator exp
Rule 73    functionTypeA1 -> <empty>
Rule 74    term -> factor factorA1 termFunction
Rule 75    term -> factor factorA1
Rule 76    factorA1 -> <empty>
Rule 77    termFunction -> MULTIPLY addOperator term
Rule 78    termFunction -> DIVIDE addOperator term
Rule 79    addOperator -> <empty>
Rule 80    factor -> LEFTPAR Expression2 RIGHTPAR
Rule 81    factor -> cst_PDT addOperand
Rule 82    factor -> module
Rule 83    factor -> ID addOperand addTypeId
Rule 84    addOperand -> <empty>
Rule 85    addTypeId -> <empty>
Rule 86    read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON
Rule 87    id_list -> ID addRead id_listFunction
Rule 88    id_listFunction -> COMA id_list
Rule 89    id_listFunction -> <empty>
Rule 90    addRead -> <empty>
Rule 91    print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
Rule 92    printFunction -> print_param COMA printFunction2
Rule 93    printFunction -> print_param
Rule 94    printFunction2 -> printFunction
Rule 95    addPrint -> <empty>
Rule 96    print_param -> Expression2 addPrint
Rule 97    print_param -> CST_STRING addPrintString
Rule 98    addPrintString -> <empty>
Rule 99    module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
Rule 100   statement -> return
Rule 101   statement -> if statement
Rule 102   statement -> comment statement
Rule 103   statement -> read statement
Rule 104   statement -> print statement
Rule 105   statement -> assignment statement
Rule 106   statement -> declaration statement
Rule 107   statement -> module statement
Rule 108   statement -> for statement
Rule 109   statement -> while statement
Rule 110   statement -> <empty>
Rule 111   moduleFunction -> Expression2 COMA moduleFunction
Rule 112   moduleFunction -> Expression2 RIGHTPAR
Rule 113   moduleFunction -> <empty>

Terminals, with rules where they appear

AND                  : 56
CHAR                 : 15
COMA                 : 29 38 88 92 111
COMMENT_TEXT         : 25
CST_CHAR             : 45
CST_FLOAT            : 44
CST_INT              : 24 31 33 43
CST_STRING           : 97
DIVIDE               : 78
DOLLARSIGN           : 67
ELSE                 : 20
EQUAL                : 9 24
EXCLAMATION          : 65
FLOAT                : 14
FOR                  : 23
FUNCTION             : 41 42
GT                   : 60
ID                   : 1 9 24 27 35 36 37 83 87 99
IF                   : 17
INT                  : 13
ISEQUAL              : 63
LEFTBRACE            : 3 17 20 23 26 35 36
LEFTBRACK            : 31 33
LEFTPAR              : 3 16 17 26 35 36 80 86 91 99
LT                   : 61
MAIN                 : 3
MINUS                : 72
MULTIPLY             : 77
NOTEQUAL             : 62
OR                   : 57
PLUS                 : 71
PRINT                : 91
PROGRAM              : 1
QUESTION             : 66
READ                 : 86
RETURN               : 16
RIGHTBRACE           : 3 17 20 23 26 35 36
RIGHTBRACK           : 31 33
RIGHTPAR             : 3 16 17 26 35 36 80 86 91 99 112
SEMICOLON            : 1 9 11 16 35 36 86 91 99
THEN                 : 17
TO                   : 23
VAR                  : 10
VOID                 : 42
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

Exp2A1               : 50 52 53 54
Exp3A1               : 58 58 59
Expression2          : 9 16 17 23 26 80 96 111 112
Expression22         : 50 53
Expression2Nested    : 50 53
Expression3          : 50 51 52 53 54
Expression33         : 58
PDT                  : 11 37 41
addOperand           : 81 83
addOperator          : 56 57 60 61 62 63 65 66 67 71 72 77 78
addPrint             : 96
addPrintString       : 97
addRead              : 87
addTypeId            : 83
assignment           : 105
comment              : 102
createJQelse         : 20
createJQif           : 17
cst_PDT              : 81
cstprimA1            : 43
cstprimA2            : 44
cstprimA3            : 45
declaration          : 5 106
declarationPDT       : 10 11
exp                  : 58 58 59 71 72
expFunction          : 68
factor               : 74 75
factorA1             : 74 75
for                  : 108
forDeclaration       : 23
function             : 7
functionA1           : 35 36
functionParam        : 37
functionType         : 35 36
functionTypeA1       : 42
id_list              : 86 88
id_listFunction      : 87
if                   : 101
ifElse               : 17
main                 : 1
mainA1               : 3
module               : 82 107
moduleFunction       : 99 111
opMatrix             : 51
param                : 35 38
paramA1              : 37
print                : 104
printFunction        : 91 94
printFunction2       : 92
print_param          : 92 93
program              : 0
programA1            : 1
programFunc          : 1 7
programVars          : 1
read                 : 103
return               : 100
statement            : 3 17 20 23 26 35 36 101 102 103 104 105 106 107 108 109
term                 : 68 69 77 78
termA1               : 68 69
termFunction         : 74
updateJQ             : 17
vars                 : 11 29
varsA1               : 27
varsArray            : 27
varsComa             : 27
varsMatrix           : 33
while                : 109

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID programA1 SEMICOLON programVars programFunc main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID programA1 SEMICOLON programVars programFunc main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . programA1 SEMICOLON programVars programFunc main
    (2) programA1 -> .

    SEMICOLON       reduce using rule 2 (programA1 -> .)

    programA1                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID programA1 . SEMICOLON programVars programFunc main

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID programA1 SEMICOLON . programVars programFunc main
    (5) programVars -> . declaration
    (6) programVars -> .
    (10) declaration -> . VAR declarationPDT

    FUNCTION        reduce using rule 6 (programVars -> .)
    MAIN            reduce using rule 6 (programVars -> .)
    VAR             shift and go to state 8

    programVars                    shift and go to state 6
    declaration                    shift and go to state 7

state 6

    (1) program -> PROGRAM ID programA1 SEMICOLON programVars . programFunc main
    (7) programFunc -> . function programFunc
    (8) programFunc -> .
    (35) function -> . functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (36) function -> . functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (41) functionType -> . FUNCTION PDT
    (42) functionType -> . FUNCTION VOID functionTypeA1

    MAIN            reduce using rule 8 (programFunc -> .)
    FUNCTION        shift and go to state 12

    programFunc                    shift and go to state 9
    function                       shift and go to state 10
    functionType                   shift and go to state 11

state 7

    (5) programVars -> declaration .

    FUNCTION        reduce using rule 5 (programVars -> declaration .)
    MAIN            reduce using rule 5 (programVars -> declaration .)


state 8

    (10) declaration -> VAR . declarationPDT
    (11) declarationPDT -> . PDT vars SEMICOLON declarationPDT
    (12) declarationPDT -> .
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    FUNCTION        reduce using rule 12 (declarationPDT -> .)
    MAIN            reduce using rule 12 (declarationPDT -> .)
    RETURN          reduce using rule 12 (declarationPDT -> .)
    IF              reduce using rule 12 (declarationPDT -> .)
    COMMENT_TEXT    reduce using rule 12 (declarationPDT -> .)
    READ            reduce using rule 12 (declarationPDT -> .)
    PRINT           reduce using rule 12 (declarationPDT -> .)
    ID              reduce using rule 12 (declarationPDT -> .)
    VAR             reduce using rule 12 (declarationPDT -> .)
    FOR             reduce using rule 12 (declarationPDT -> .)
    WHILE           reduce using rule 12 (declarationPDT -> .)
    RIGHTBRACE      reduce using rule 12 (declarationPDT -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    declarationPDT                 shift and go to state 13
    PDT                            shift and go to state 14

state 9

    (1) program -> PROGRAM ID programA1 SEMICOLON programVars programFunc . main
    (3) main -> . mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE
    (4) mainA1 -> .

    MAIN            reduce using rule 4 (mainA1 -> .)

    main                           shift and go to state 18
    mainA1                         shift and go to state 19

state 10

    (7) programFunc -> function . programFunc
    (7) programFunc -> . function programFunc
    (8) programFunc -> .
    (35) function -> . functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (36) function -> . functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (41) functionType -> . FUNCTION PDT
    (42) functionType -> . FUNCTION VOID functionTypeA1

    MAIN            reduce using rule 8 (programFunc -> .)
    FUNCTION        shift and go to state 12

    function                       shift and go to state 10
    programFunc                    shift and go to state 20
    functionType                   shift and go to state 11

state 11

    (35) function -> functionType . ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (36) function -> functionType . ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    ID              shift and go to state 21


state 12

    (41) functionType -> FUNCTION . PDT
    (42) functionType -> FUNCTION . VOID functionTypeA1
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    VOID            shift and go to state 23
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    PDT                            shift and go to state 22

state 13

    (10) declaration -> VAR declarationPDT .

    FUNCTION        reduce using rule 10 (declaration -> VAR declarationPDT .)
    MAIN            reduce using rule 10 (declaration -> VAR declarationPDT .)
    RETURN          reduce using rule 10 (declaration -> VAR declarationPDT .)
    IF              reduce using rule 10 (declaration -> VAR declarationPDT .)
    COMMENT_TEXT    reduce using rule 10 (declaration -> VAR declarationPDT .)
    READ            reduce using rule 10 (declaration -> VAR declarationPDT .)
    PRINT           reduce using rule 10 (declaration -> VAR declarationPDT .)
    ID              reduce using rule 10 (declaration -> VAR declarationPDT .)
    VAR             reduce using rule 10 (declaration -> VAR declarationPDT .)
    FOR             reduce using rule 10 (declaration -> VAR declarationPDT .)
    WHILE           reduce using rule 10 (declaration -> VAR declarationPDT .)
    RIGHTBRACE      reduce using rule 10 (declaration -> VAR declarationPDT .)


state 14

    (11) declarationPDT -> PDT . vars SEMICOLON declarationPDT
    (27) vars -> . ID varsA1 varsArray varsComa

    ID              shift and go to state 25

    vars                           shift and go to state 24

state 15

    (13) PDT -> INT .

    ID              reduce using rule 13 (PDT -> INT .)


state 16

    (14) PDT -> FLOAT .

    ID              reduce using rule 14 (PDT -> FLOAT .)


state 17

    (15) PDT -> CHAR .

    ID              reduce using rule 15 (PDT -> CHAR .)


state 18

    (1) program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main .

    $end            reduce using rule 1 (program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main .)


state 19

    (3) main -> mainA1 . MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE

    MAIN            shift and go to state 26


state 20

    (7) programFunc -> function programFunc .

    MAIN            reduce using rule 7 (programFunc -> function programFunc .)


state 21

    (35) function -> functionType ID . functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (36) function -> functionType ID . functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (49) functionA1 -> .

    LEFTPAR         reduce using rule 49 (functionA1 -> .)

    functionA1                     shift and go to state 27

state 22

    (41) functionType -> FUNCTION PDT .

    ID              reduce using rule 41 (functionType -> FUNCTION PDT .)


state 23

    (42) functionType -> FUNCTION VOID . functionTypeA1
    (73) functionTypeA1 -> .

    ID              reduce using rule 73 (functionTypeA1 -> .)

    functionTypeA1                 shift and go to state 28

state 24

    (11) declarationPDT -> PDT vars . SEMICOLON declarationPDT

    SEMICOLON       shift and go to state 29


state 25

    (27) vars -> ID . varsA1 varsArray varsComa
    (28) varsA1 -> .

    LEFTBRACK       reduce using rule 28 (varsA1 -> .)
    COMA            reduce using rule 28 (varsA1 -> .)
    SEMICOLON       reduce using rule 28 (varsA1 -> .)

    varsA1                         shift and go to state 30

state 26

    (3) main -> mainA1 MAIN . LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 31


state 27

    (35) function -> functionType ID functionA1 . LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (36) function -> functionType ID functionA1 . LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 32


state 28

    (42) functionType -> FUNCTION VOID functionTypeA1 .

    ID              reduce using rule 42 (functionType -> FUNCTION VOID functionTypeA1 .)


state 29

    (11) declarationPDT -> PDT vars SEMICOLON . declarationPDT
    (11) declarationPDT -> . PDT vars SEMICOLON declarationPDT
    (12) declarationPDT -> .
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    FUNCTION        reduce using rule 12 (declarationPDT -> .)
    MAIN            reduce using rule 12 (declarationPDT -> .)
    RETURN          reduce using rule 12 (declarationPDT -> .)
    IF              reduce using rule 12 (declarationPDT -> .)
    COMMENT_TEXT    reduce using rule 12 (declarationPDT -> .)
    READ            reduce using rule 12 (declarationPDT -> .)
    PRINT           reduce using rule 12 (declarationPDT -> .)
    ID              reduce using rule 12 (declarationPDT -> .)
    VAR             reduce using rule 12 (declarationPDT -> .)
    FOR             reduce using rule 12 (declarationPDT -> .)
    WHILE           reduce using rule 12 (declarationPDT -> .)
    RIGHTBRACE      reduce using rule 12 (declarationPDT -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    PDT                            shift and go to state 14
    declarationPDT                 shift and go to state 33

state 30

    (27) vars -> ID varsA1 . varsArray varsComa
    (33) varsArray -> . LEFTBRACK CST_INT RIGHTBRACK varsMatrix
    (34) varsArray -> .

    LEFTBRACK       shift and go to state 35
    COMA            reduce using rule 34 (varsArray -> .)
    SEMICOLON       reduce using rule 34 (varsArray -> .)

    varsArray                      shift and go to state 34

state 31

    (3) main -> mainA1 MAIN LEFTPAR . RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 36


state 32

    (35) function -> functionType ID functionA1 LEFTPAR . param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (36) function -> functionType ID functionA1 LEFTPAR . RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE
    (37) param -> . PDT ID paramA1 functionParam
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    RIGHTPAR        shift and go to state 38
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    param                          shift and go to state 37
    PDT                            shift and go to state 39

state 33

    (11) declarationPDT -> PDT vars SEMICOLON declarationPDT .

    FUNCTION        reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    MAIN            reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    RETURN          reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    IF              reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    COMMENT_TEXT    reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    READ            reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    PRINT           reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    ID              reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    VAR             reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    FOR             reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    WHILE           reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)
    RIGHTBRACE      reduce using rule 11 (declarationPDT -> PDT vars SEMICOLON declarationPDT .)


state 34

    (27) vars -> ID varsA1 varsArray . varsComa
    (29) varsComa -> . COMA vars
    (30) varsComa -> .

    COMA            shift and go to state 41
    SEMICOLON       reduce using rule 30 (varsComa -> .)

    varsComa                       shift and go to state 40

state 35

    (33) varsArray -> LEFTBRACK . CST_INT RIGHTBRACK varsMatrix

    CST_INT         shift and go to state 42


state 36

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 43


state 37

    (35) function -> functionType ID functionA1 LEFTPAR param . RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 44


state 38

    (36) function -> functionType ID functionA1 LEFTPAR RIGHTPAR . SEMICOLON LEFTBRACE statement RIGHTBRACE

    SEMICOLON       shift and go to state 45


state 39

    (37) param -> PDT . ID paramA1 functionParam

    ID              shift and go to state 46


state 40

    (27) vars -> ID varsA1 varsArray varsComa .

    SEMICOLON       reduce using rule 27 (vars -> ID varsA1 varsArray varsComa .)


state 41

    (29) varsComa -> COMA . vars
    (27) vars -> . ID varsA1 varsArray varsComa

    ID              shift and go to state 25

    vars                           shift and go to state 47

state 42

    (33) varsArray -> LEFTBRACK CST_INT . RIGHTBRACK varsMatrix

    RIGHTBRACK      shift and go to state 48


state 43

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE . statement RIGHTBRACE
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 49
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 44

    (35) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR . SEMICOLON LEFTBRACE statement RIGHTBRACE

    SEMICOLON       shift and go to state 68


state 45

    (36) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 69


state 46

    (37) param -> PDT ID . paramA1 functionParam
    (40) paramA1 -> .

    COMA            reduce using rule 40 (paramA1 -> .)
    RIGHTPAR        reduce using rule 40 (paramA1 -> .)

    paramA1                        shift and go to state 70

state 47

    (29) varsComa -> COMA vars .

    SEMICOLON       reduce using rule 29 (varsComa -> COMA vars .)


state 48

    (33) varsArray -> LEFTBRACK CST_INT RIGHTBRACK . varsMatrix
    (31) varsMatrix -> . LEFTBRACK CST_INT RIGHTBRACK
    (32) varsMatrix -> .

    LEFTBRACK       shift and go to state 71
    COMA            reduce using rule 32 (varsMatrix -> .)
    SEMICOLON       reduce using rule 32 (varsMatrix -> .)

    varsMatrix                     shift and go to state 72

state 49

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 73


state 50

    (100) statement -> return .

    RIGHTBRACE      reduce using rule 100 (statement -> return .)


state 51

    (101) statement -> if . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    if                             shift and go to state 51
    statement                      shift and go to state 74
    return                         shift and go to state 50
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 52

    (102) statement -> comment . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    comment                        shift and go to state 52
    statement                      shift and go to state 75
    return                         shift and go to state 50
    if                             shift and go to state 51
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 53

    (103) statement -> read . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    read                           shift and go to state 53
    statement                      shift and go to state 76
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 54

    (104) statement -> print . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    print                          shift and go to state 54
    statement                      shift and go to state 77
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 55

    (105) statement -> assignment . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    assignment                     shift and go to state 55
    statement                      shift and go to state 78
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 56

    (106) statement -> declaration . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    declaration                    shift and go to state 56
    statement                      shift and go to state 79
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 57

    (107) statement -> module . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    module                         shift and go to state 57
    statement                      shift and go to state 80
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    for                            shift and go to state 58
    while                          shift and go to state 59

state 58

    (108) statement -> for . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    for                            shift and go to state 58
    statement                      shift and go to state 81
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    while                          shift and go to state 59

state 59

    (109) statement -> while . statement
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    while                          shift and go to state 59
    statement                      shift and go to state 82
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58

state 60

    (16) return -> RETURN . LEFTPAR Expression2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 83


state 61

    (17) if -> IF . LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ

    LEFTPAR         shift and go to state 84


state 62

    (25) comment -> COMMENT_TEXT .

    RETURN          reduce using rule 25 (comment -> COMMENT_TEXT .)
    IF              reduce using rule 25 (comment -> COMMENT_TEXT .)
    COMMENT_TEXT    reduce using rule 25 (comment -> COMMENT_TEXT .)
    READ            reduce using rule 25 (comment -> COMMENT_TEXT .)
    PRINT           reduce using rule 25 (comment -> COMMENT_TEXT .)
    ID              reduce using rule 25 (comment -> COMMENT_TEXT .)
    VAR             reduce using rule 25 (comment -> COMMENT_TEXT .)
    FOR             reduce using rule 25 (comment -> COMMENT_TEXT .)
    WHILE           reduce using rule 25 (comment -> COMMENT_TEXT .)
    RIGHTBRACE      reduce using rule 25 (comment -> COMMENT_TEXT .)


state 63

    (86) read -> READ . LEFTPAR id_list RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 85


state 64

    (91) print -> PRINT . LEFTPAR printFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 86


state 65

    (9) assignment -> ID . EQUAL Expression2 SEMICOLON
    (99) module -> ID . LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    EQUAL           shift and go to state 87
    LEFTPAR         shift and go to state 88


state 66

    (23) for -> FOR . forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (24) forDeclaration -> . ID EQUAL CST_INT

    ID              shift and go to state 90

    forDeclaration                 shift and go to state 89

state 67

    (26) while -> WHILE . LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    LEFTPAR         shift and go to state 91


state 68

    (35) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 92


state 69

    (36) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE . statement RIGHTBRACE
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 93
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 70

    (37) param -> PDT ID paramA1 . functionParam
    (38) functionParam -> . COMA param
    (39) functionParam -> .

    COMA            shift and go to state 95
    RIGHTPAR        reduce using rule 39 (functionParam -> .)

    functionParam                  shift and go to state 94

state 71

    (31) varsMatrix -> LEFTBRACK . CST_INT RIGHTBRACK

    CST_INT         shift and go to state 96


state 72

    (33) varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .

    COMA            reduce using rule 33 (varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .)
    SEMICOLON       reduce using rule 33 (varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix .)


state 73

    (3) main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE .

    $end            reduce using rule 3 (main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE .)


state 74

    (101) statement -> if statement .

    RIGHTBRACE      reduce using rule 101 (statement -> if statement .)


state 75

    (102) statement -> comment statement .

    RIGHTBRACE      reduce using rule 102 (statement -> comment statement .)


state 76

    (103) statement -> read statement .

    RIGHTBRACE      reduce using rule 103 (statement -> read statement .)


state 77

    (104) statement -> print statement .

    RIGHTBRACE      reduce using rule 104 (statement -> print statement .)


state 78

    (105) statement -> assignment statement .

    RIGHTBRACE      reduce using rule 105 (statement -> assignment statement .)


state 79

    (106) statement -> declaration statement .

    RIGHTBRACE      reduce using rule 106 (statement -> declaration statement .)


state 80

    (107) statement -> module statement .

    RIGHTBRACE      reduce using rule 107 (statement -> module statement .)


state 81

    (108) statement -> for statement .

    RIGHTBRACE      reduce using rule 108 (statement -> for statement .)


state 82

    (109) statement -> while statement .

    RIGHTBRACE      reduce using rule 109 (statement -> while statement .)


state 83

    (16) return -> RETURN LEFTPAR . Expression2 RIGHTPAR SEMICOLON
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 98
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 84

    (17) if -> IF LEFTPAR . Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 109
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 85

    (86) read -> READ LEFTPAR . id_list RIGHTPAR SEMICOLON
    (87) id_list -> . ID addRead id_listFunction

    ID              shift and go to state 111

    id_list                        shift and go to state 110

state 86

    (91) print -> PRINT LEFTPAR . printFunction RIGHTPAR SEMICOLON
    (92) printFunction -> . print_param COMA printFunction2
    (93) printFunction -> . print_param
    (96) print_param -> . Expression2 addPrint
    (97) print_param -> . CST_STRING addPrintString
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    CST_STRING      shift and go to state 115
    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    printFunction                  shift and go to state 112
    print_param                    shift and go to state 113
    Expression2                    shift and go to state 114
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 87

    (9) assignment -> ID EQUAL . Expression2 SEMICOLON
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 116
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 88

    (99) module -> ID LEFTPAR . moduleFunction RIGHTPAR SEMICOLON
    (111) moduleFunction -> . Expression2 COMA moduleFunction
    (112) moduleFunction -> . Expression2 RIGHTPAR
    (113) moduleFunction -> .
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    RIGHTPAR        reduce using rule 113 (moduleFunction -> .)
    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    moduleFunction                 shift and go to state 117
    Expression2                    shift and go to state 118
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 89

    (23) for -> FOR forDeclaration . TO Expression2 LEFTBRACE statement RIGHTBRACE

    TO              shift and go to state 119


state 90

    (24) forDeclaration -> ID . EQUAL CST_INT

    EQUAL           shift and go to state 120


state 91

    (26) while -> WHILE LEFTPAR . Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 121
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 92

    (35) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE . statement RIGHTBRACE
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 122
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 93

    (36) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 123


state 94

    (37) param -> PDT ID paramA1 functionParam .

    RIGHTPAR        reduce using rule 37 (param -> PDT ID paramA1 functionParam .)


state 95

    (38) functionParam -> COMA . param
    (37) param -> . PDT ID paramA1 functionParam
    (13) PDT -> . INT
    (14) PDT -> . FLOAT
    (15) PDT -> . CHAR

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    param                          shift and go to state 124
    PDT                            shift and go to state 39

state 96

    (31) varsMatrix -> LEFTBRACK CST_INT . RIGHTBRACK

    RIGHTBRACK      shift and go to state 125


state 97

    (80) factor -> LEFTPAR . Expression2 RIGHTPAR
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 126
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 98

    (16) return -> RETURN LEFTPAR Expression2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 127


state 99

    (50) Expression2 -> Expression3 . Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> Expression3 . opMatrix
    (52) Expression2 -> Expression3 . Exp2A1
    (55) Exp2A1 -> .
    (65) opMatrix -> . EXCLAMATION addOperator
    (66) opMatrix -> . QUESTION addOperator
    (67) opMatrix -> . DOLLARSIGN addOperator

    AND             reduce using rule 55 (Exp2A1 -> .)
    OR              reduce using rule 55 (Exp2A1 -> .)
    RIGHTPAR        reduce using rule 55 (Exp2A1 -> .)
    COMA            reduce using rule 55 (Exp2A1 -> .)
    SEMICOLON       reduce using rule 55 (Exp2A1 -> .)
    LEFTBRACE       reduce using rule 55 (Exp2A1 -> .)
    EXCLAMATION     shift and go to state 130
    QUESTION        shift and go to state 131
    DOLLARSIGN      shift and go to state 132

    Exp2A1                         shift and go to state 128
    opMatrix                       shift and go to state 129

state 100

    (58) Expression3 -> exp . Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> exp . Exp3A1
    (64) Exp3A1 -> .

    GT              reduce using rule 64 (Exp3A1 -> .)
    LT              reduce using rule 64 (Exp3A1 -> .)
    NOTEQUAL        reduce using rule 64 (Exp3A1 -> .)
    ISEQUAL         reduce using rule 64 (Exp3A1 -> .)
    EXCLAMATION     reduce using rule 64 (Exp3A1 -> .)
    QUESTION        reduce using rule 64 (Exp3A1 -> .)
    DOLLARSIGN      reduce using rule 64 (Exp3A1 -> .)
    AND             reduce using rule 64 (Exp3A1 -> .)
    OR              reduce using rule 64 (Exp3A1 -> .)
    RIGHTPAR        reduce using rule 64 (Exp3A1 -> .)
    COMA            reduce using rule 64 (Exp3A1 -> .)
    SEMICOLON       reduce using rule 64 (Exp3A1 -> .)
    LEFTBRACE       reduce using rule 64 (Exp3A1 -> .)

    Exp3A1                         shift and go to state 133

state 101

    (68) exp -> term . termA1 expFunction
    (69) exp -> term . termA1
    (70) termA1 -> .

    PLUS            reduce using rule 70 (termA1 -> .)
    MINUS           reduce using rule 70 (termA1 -> .)
    GT              reduce using rule 70 (termA1 -> .)
    LT              reduce using rule 70 (termA1 -> .)
    NOTEQUAL        reduce using rule 70 (termA1 -> .)
    ISEQUAL         reduce using rule 70 (termA1 -> .)
    EXCLAMATION     reduce using rule 70 (termA1 -> .)
    QUESTION        reduce using rule 70 (termA1 -> .)
    DOLLARSIGN      reduce using rule 70 (termA1 -> .)
    AND             reduce using rule 70 (termA1 -> .)
    OR              reduce using rule 70 (termA1 -> .)
    RIGHTPAR        reduce using rule 70 (termA1 -> .)
    COMA            reduce using rule 70 (termA1 -> .)
    SEMICOLON       reduce using rule 70 (termA1 -> .)
    LEFTBRACE       reduce using rule 70 (termA1 -> .)

    termA1                         shift and go to state 134

state 102

    (74) term -> factor . factorA1 termFunction
    (75) term -> factor . factorA1
    (76) factorA1 -> .

    MULTIPLY        reduce using rule 76 (factorA1 -> .)
    DIVIDE          reduce using rule 76 (factorA1 -> .)
    PLUS            reduce using rule 76 (factorA1 -> .)
    MINUS           reduce using rule 76 (factorA1 -> .)
    GT              reduce using rule 76 (factorA1 -> .)
    LT              reduce using rule 76 (factorA1 -> .)
    NOTEQUAL        reduce using rule 76 (factorA1 -> .)
    ISEQUAL         reduce using rule 76 (factorA1 -> .)
    EXCLAMATION     reduce using rule 76 (factorA1 -> .)
    QUESTION        reduce using rule 76 (factorA1 -> .)
    DOLLARSIGN      reduce using rule 76 (factorA1 -> .)
    AND             reduce using rule 76 (factorA1 -> .)
    OR              reduce using rule 76 (factorA1 -> .)
    RIGHTPAR        reduce using rule 76 (factorA1 -> .)
    COMA            reduce using rule 76 (factorA1 -> .)
    SEMICOLON       reduce using rule 76 (factorA1 -> .)
    LEFTBRACE       reduce using rule 76 (factorA1 -> .)

    factorA1                       shift and go to state 135

state 103

    (81) factor -> cst_PDT . addOperand
    (84) addOperand -> .

    MULTIPLY        reduce using rule 84 (addOperand -> .)
    DIVIDE          reduce using rule 84 (addOperand -> .)
    PLUS            reduce using rule 84 (addOperand -> .)
    MINUS           reduce using rule 84 (addOperand -> .)
    GT              reduce using rule 84 (addOperand -> .)
    LT              reduce using rule 84 (addOperand -> .)
    NOTEQUAL        reduce using rule 84 (addOperand -> .)
    ISEQUAL         reduce using rule 84 (addOperand -> .)
    EXCLAMATION     reduce using rule 84 (addOperand -> .)
    QUESTION        reduce using rule 84 (addOperand -> .)
    DOLLARSIGN      reduce using rule 84 (addOperand -> .)
    AND             reduce using rule 84 (addOperand -> .)
    OR              reduce using rule 84 (addOperand -> .)
    RIGHTPAR        reduce using rule 84 (addOperand -> .)
    COMA            reduce using rule 84 (addOperand -> .)
    SEMICOLON       reduce using rule 84 (addOperand -> .)
    LEFTBRACE       reduce using rule 84 (addOperand -> .)

    addOperand                     shift and go to state 136

state 104

    (82) factor -> module .

    MULTIPLY        reduce using rule 82 (factor -> module .)
    DIVIDE          reduce using rule 82 (factor -> module .)
    PLUS            reduce using rule 82 (factor -> module .)
    MINUS           reduce using rule 82 (factor -> module .)
    GT              reduce using rule 82 (factor -> module .)
    LT              reduce using rule 82 (factor -> module .)
    NOTEQUAL        reduce using rule 82 (factor -> module .)
    ISEQUAL         reduce using rule 82 (factor -> module .)
    EXCLAMATION     reduce using rule 82 (factor -> module .)
    QUESTION        reduce using rule 82 (factor -> module .)
    DOLLARSIGN      reduce using rule 82 (factor -> module .)
    AND             reduce using rule 82 (factor -> module .)
    OR              reduce using rule 82 (factor -> module .)
    RIGHTPAR        reduce using rule 82 (factor -> module .)
    COMA            reduce using rule 82 (factor -> module .)
    SEMICOLON       reduce using rule 82 (factor -> module .)
    LEFTBRACE       reduce using rule 82 (factor -> module .)


state 105

    (83) factor -> ID . addOperand addTypeId
    (99) module -> ID . LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (84) addOperand -> .

    LEFTPAR         shift and go to state 88
    MULTIPLY        reduce using rule 84 (addOperand -> .)
    DIVIDE          reduce using rule 84 (addOperand -> .)
    PLUS            reduce using rule 84 (addOperand -> .)
    MINUS           reduce using rule 84 (addOperand -> .)
    GT              reduce using rule 84 (addOperand -> .)
    LT              reduce using rule 84 (addOperand -> .)
    NOTEQUAL        reduce using rule 84 (addOperand -> .)
    ISEQUAL         reduce using rule 84 (addOperand -> .)
    EXCLAMATION     reduce using rule 84 (addOperand -> .)
    QUESTION        reduce using rule 84 (addOperand -> .)
    DOLLARSIGN      reduce using rule 84 (addOperand -> .)
    AND             reduce using rule 84 (addOperand -> .)
    OR              reduce using rule 84 (addOperand -> .)
    RIGHTPAR        reduce using rule 84 (addOperand -> .)
    COMA            reduce using rule 84 (addOperand -> .)
    SEMICOLON       reduce using rule 84 (addOperand -> .)
    LEFTBRACE       reduce using rule 84 (addOperand -> .)

    addOperand                     shift and go to state 137

state 106

    (43) cst_PDT -> CST_INT . cstprimA1
    (46) cstprimA1 -> .

    MULTIPLY        reduce using rule 46 (cstprimA1 -> .)
    DIVIDE          reduce using rule 46 (cstprimA1 -> .)
    PLUS            reduce using rule 46 (cstprimA1 -> .)
    MINUS           reduce using rule 46 (cstprimA1 -> .)
    GT              reduce using rule 46 (cstprimA1 -> .)
    LT              reduce using rule 46 (cstprimA1 -> .)
    NOTEQUAL        reduce using rule 46 (cstprimA1 -> .)
    ISEQUAL         reduce using rule 46 (cstprimA1 -> .)
    EXCLAMATION     reduce using rule 46 (cstprimA1 -> .)
    QUESTION        reduce using rule 46 (cstprimA1 -> .)
    DOLLARSIGN      reduce using rule 46 (cstprimA1 -> .)
    AND             reduce using rule 46 (cstprimA1 -> .)
    OR              reduce using rule 46 (cstprimA1 -> .)
    RIGHTPAR        reduce using rule 46 (cstprimA1 -> .)
    COMA            reduce using rule 46 (cstprimA1 -> .)
    SEMICOLON       reduce using rule 46 (cstprimA1 -> .)
    LEFTBRACE       reduce using rule 46 (cstprimA1 -> .)

    cstprimA1                      shift and go to state 138

state 107

    (44) cst_PDT -> CST_FLOAT . cstprimA2
    (47) cstprimA2 -> .

    MULTIPLY        reduce using rule 47 (cstprimA2 -> .)
    DIVIDE          reduce using rule 47 (cstprimA2 -> .)
    PLUS            reduce using rule 47 (cstprimA2 -> .)
    MINUS           reduce using rule 47 (cstprimA2 -> .)
    GT              reduce using rule 47 (cstprimA2 -> .)
    LT              reduce using rule 47 (cstprimA2 -> .)
    NOTEQUAL        reduce using rule 47 (cstprimA2 -> .)
    ISEQUAL         reduce using rule 47 (cstprimA2 -> .)
    EXCLAMATION     reduce using rule 47 (cstprimA2 -> .)
    QUESTION        reduce using rule 47 (cstprimA2 -> .)
    DOLLARSIGN      reduce using rule 47 (cstprimA2 -> .)
    AND             reduce using rule 47 (cstprimA2 -> .)
    OR              reduce using rule 47 (cstprimA2 -> .)
    RIGHTPAR        reduce using rule 47 (cstprimA2 -> .)
    COMA            reduce using rule 47 (cstprimA2 -> .)
    SEMICOLON       reduce using rule 47 (cstprimA2 -> .)
    LEFTBRACE       reduce using rule 47 (cstprimA2 -> .)

    cstprimA2                      shift and go to state 139

state 108

    (45) cst_PDT -> CST_CHAR . cstprimA3
    (48) cstprimA3 -> .

    MULTIPLY        reduce using rule 48 (cstprimA3 -> .)
    DIVIDE          reduce using rule 48 (cstprimA3 -> .)
    PLUS            reduce using rule 48 (cstprimA3 -> .)
    MINUS           reduce using rule 48 (cstprimA3 -> .)
    GT              reduce using rule 48 (cstprimA3 -> .)
    LT              reduce using rule 48 (cstprimA3 -> .)
    NOTEQUAL        reduce using rule 48 (cstprimA3 -> .)
    ISEQUAL         reduce using rule 48 (cstprimA3 -> .)
    EXCLAMATION     reduce using rule 48 (cstprimA3 -> .)
    QUESTION        reduce using rule 48 (cstprimA3 -> .)
    DOLLARSIGN      reduce using rule 48 (cstprimA3 -> .)
    AND             reduce using rule 48 (cstprimA3 -> .)
    OR              reduce using rule 48 (cstprimA3 -> .)
    RIGHTPAR        reduce using rule 48 (cstprimA3 -> .)
    COMA            reduce using rule 48 (cstprimA3 -> .)
    SEMICOLON       reduce using rule 48 (cstprimA3 -> .)
    LEFTBRACE       reduce using rule 48 (cstprimA3 -> .)

    cstprimA3                      shift and go to state 140

state 109

    (17) if -> IF LEFTPAR Expression2 . RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ

    RIGHTPAR        shift and go to state 141


state 110

    (86) read -> READ LEFTPAR id_list . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 142


state 111

    (87) id_list -> ID . addRead id_listFunction
    (90) addRead -> .

    COMA            reduce using rule 90 (addRead -> .)
    RIGHTPAR        reduce using rule 90 (addRead -> .)

    addRead                        shift and go to state 143

state 112

    (91) print -> PRINT LEFTPAR printFunction . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 144


state 113

    (92) printFunction -> print_param . COMA printFunction2
    (93) printFunction -> print_param .

    COMA            shift and go to state 145
    RIGHTPAR        reduce using rule 93 (printFunction -> print_param .)


state 114

    (96) print_param -> Expression2 . addPrint
    (95) addPrint -> .

    COMA            reduce using rule 95 (addPrint -> .)
    RIGHTPAR        reduce using rule 95 (addPrint -> .)

    addPrint                       shift and go to state 146

state 115

    (97) print_param -> CST_STRING . addPrintString
    (98) addPrintString -> .

    COMA            reduce using rule 98 (addPrintString -> .)
    RIGHTPAR        reduce using rule 98 (addPrintString -> .)

    addPrintString                 shift and go to state 147

state 116

    (9) assignment -> ID EQUAL Expression2 . SEMICOLON

    SEMICOLON       shift and go to state 148


state 117

    (99) module -> ID LEFTPAR moduleFunction . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 149


state 118

    (111) moduleFunction -> Expression2 . COMA moduleFunction
    (112) moduleFunction -> Expression2 . RIGHTPAR

    COMA            shift and go to state 150
    RIGHTPAR        shift and go to state 151


state 119

    (23) for -> FOR forDeclaration TO . Expression2 LEFTBRACE statement RIGHTBRACE
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 152
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 120

    (24) forDeclaration -> ID EQUAL . CST_INT

    CST_INT         shift and go to state 153


state 121

    (26) while -> WHILE LEFTPAR Expression2 . RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTPAR        shift and go to state 154


state 122

    (35) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 155


state 123

    (36) function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .

    FUNCTION        reduce using rule 36 (function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)
    MAIN            reduce using rule 36 (function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)


state 124

    (38) functionParam -> COMA param .

    RIGHTPAR        reduce using rule 38 (functionParam -> COMA param .)


state 125

    (31) varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .

    COMA            reduce using rule 31 (varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .)
    SEMICOLON       reduce using rule 31 (varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK .)


state 126

    (80) factor -> LEFTPAR Expression2 . RIGHTPAR

    RIGHTPAR        shift and go to state 156


state 127

    (16) return -> RETURN LEFTPAR Expression2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 157


state 128

    (50) Expression2 -> Expression3 Exp2A1 . Expression22 Expression2Nested
    (52) Expression2 -> Expression3 Exp2A1 .
    (56) Expression22 -> . AND addOperator
    (57) Expression22 -> . OR addOperator

    RIGHTPAR        reduce using rule 52 (Expression2 -> Expression3 Exp2A1 .)
    COMA            reduce using rule 52 (Expression2 -> Expression3 Exp2A1 .)
    SEMICOLON       reduce using rule 52 (Expression2 -> Expression3 Exp2A1 .)
    LEFTBRACE       reduce using rule 52 (Expression2 -> Expression3 Exp2A1 .)
    AND             shift and go to state 159
    OR              shift and go to state 160

    Expression22                   shift and go to state 158

state 129

    (51) Expression2 -> Expression3 opMatrix .

    RIGHTPAR        reduce using rule 51 (Expression2 -> Expression3 opMatrix .)
    COMA            reduce using rule 51 (Expression2 -> Expression3 opMatrix .)
    SEMICOLON       reduce using rule 51 (Expression2 -> Expression3 opMatrix .)
    LEFTBRACE       reduce using rule 51 (Expression2 -> Expression3 opMatrix .)


state 130

    (65) opMatrix -> EXCLAMATION . addOperator
    (79) addOperator -> .

    RIGHTPAR        reduce using rule 79 (addOperator -> .)
    COMA            reduce using rule 79 (addOperator -> .)
    SEMICOLON       reduce using rule 79 (addOperator -> .)
    LEFTBRACE       reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 161

state 131

    (66) opMatrix -> QUESTION . addOperator
    (79) addOperator -> .

    RIGHTPAR        reduce using rule 79 (addOperator -> .)
    COMA            reduce using rule 79 (addOperator -> .)
    SEMICOLON       reduce using rule 79 (addOperator -> .)
    LEFTBRACE       reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 162

state 132

    (67) opMatrix -> DOLLARSIGN . addOperator
    (79) addOperator -> .

    RIGHTPAR        reduce using rule 79 (addOperator -> .)
    COMA            reduce using rule 79 (addOperator -> .)
    SEMICOLON       reduce using rule 79 (addOperator -> .)
    LEFTBRACE       reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 163

state 133

    (58) Expression3 -> exp Exp3A1 . Expression33 exp Exp3A1
    (59) Expression3 -> exp Exp3A1 .
    (60) Expression33 -> . GT addOperator
    (61) Expression33 -> . LT addOperator
    (62) Expression33 -> . NOTEQUAL addOperator
    (63) Expression33 -> . ISEQUAL addOperator

    EXCLAMATION     reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    QUESTION        reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    DOLLARSIGN      reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    AND             reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    OR              reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    RIGHTPAR        reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    COMA            reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    SEMICOLON       reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    LEFTBRACE       reduce using rule 59 (Expression3 -> exp Exp3A1 .)
    GT              shift and go to state 165
    LT              shift and go to state 166
    NOTEQUAL        shift and go to state 167
    ISEQUAL         shift and go to state 168

    Expression33                   shift and go to state 164

state 134

    (68) exp -> term termA1 . expFunction
    (69) exp -> term termA1 .
    (71) expFunction -> . PLUS addOperator exp
    (72) expFunction -> . MINUS addOperator exp

    GT              reduce using rule 69 (exp -> term termA1 .)
    LT              reduce using rule 69 (exp -> term termA1 .)
    NOTEQUAL        reduce using rule 69 (exp -> term termA1 .)
    ISEQUAL         reduce using rule 69 (exp -> term termA1 .)
    EXCLAMATION     reduce using rule 69 (exp -> term termA1 .)
    QUESTION        reduce using rule 69 (exp -> term termA1 .)
    DOLLARSIGN      reduce using rule 69 (exp -> term termA1 .)
    AND             reduce using rule 69 (exp -> term termA1 .)
    OR              reduce using rule 69 (exp -> term termA1 .)
    RIGHTPAR        reduce using rule 69 (exp -> term termA1 .)
    COMA            reduce using rule 69 (exp -> term termA1 .)
    SEMICOLON       reduce using rule 69 (exp -> term termA1 .)
    LEFTBRACE       reduce using rule 69 (exp -> term termA1 .)
    PLUS            shift and go to state 170
    MINUS           shift and go to state 171

    expFunction                    shift and go to state 169

state 135

    (74) term -> factor factorA1 . termFunction
    (75) term -> factor factorA1 .
    (77) termFunction -> . MULTIPLY addOperator term
    (78) termFunction -> . DIVIDE addOperator term

    PLUS            reduce using rule 75 (term -> factor factorA1 .)
    MINUS           reduce using rule 75 (term -> factor factorA1 .)
    GT              reduce using rule 75 (term -> factor factorA1 .)
    LT              reduce using rule 75 (term -> factor factorA1 .)
    NOTEQUAL        reduce using rule 75 (term -> factor factorA1 .)
    ISEQUAL         reduce using rule 75 (term -> factor factorA1 .)
    EXCLAMATION     reduce using rule 75 (term -> factor factorA1 .)
    QUESTION        reduce using rule 75 (term -> factor factorA1 .)
    DOLLARSIGN      reduce using rule 75 (term -> factor factorA1 .)
    AND             reduce using rule 75 (term -> factor factorA1 .)
    OR              reduce using rule 75 (term -> factor factorA1 .)
    RIGHTPAR        reduce using rule 75 (term -> factor factorA1 .)
    COMA            reduce using rule 75 (term -> factor factorA1 .)
    SEMICOLON       reduce using rule 75 (term -> factor factorA1 .)
    LEFTBRACE       reduce using rule 75 (term -> factor factorA1 .)
    MULTIPLY        shift and go to state 173
    DIVIDE          shift and go to state 174

    termFunction                   shift and go to state 172

state 136

    (81) factor -> cst_PDT addOperand .

    MULTIPLY        reduce using rule 81 (factor -> cst_PDT addOperand .)
    DIVIDE          reduce using rule 81 (factor -> cst_PDT addOperand .)
    PLUS            reduce using rule 81 (factor -> cst_PDT addOperand .)
    MINUS           reduce using rule 81 (factor -> cst_PDT addOperand .)
    GT              reduce using rule 81 (factor -> cst_PDT addOperand .)
    LT              reduce using rule 81 (factor -> cst_PDT addOperand .)
    NOTEQUAL        reduce using rule 81 (factor -> cst_PDT addOperand .)
    ISEQUAL         reduce using rule 81 (factor -> cst_PDT addOperand .)
    EXCLAMATION     reduce using rule 81 (factor -> cst_PDT addOperand .)
    QUESTION        reduce using rule 81 (factor -> cst_PDT addOperand .)
    DOLLARSIGN      reduce using rule 81 (factor -> cst_PDT addOperand .)
    AND             reduce using rule 81 (factor -> cst_PDT addOperand .)
    OR              reduce using rule 81 (factor -> cst_PDT addOperand .)
    RIGHTPAR        reduce using rule 81 (factor -> cst_PDT addOperand .)
    COMA            reduce using rule 81 (factor -> cst_PDT addOperand .)
    SEMICOLON       reduce using rule 81 (factor -> cst_PDT addOperand .)
    LEFTBRACE       reduce using rule 81 (factor -> cst_PDT addOperand .)


state 137

    (83) factor -> ID addOperand . addTypeId
    (85) addTypeId -> .

    MULTIPLY        reduce using rule 85 (addTypeId -> .)
    DIVIDE          reduce using rule 85 (addTypeId -> .)
    PLUS            reduce using rule 85 (addTypeId -> .)
    MINUS           reduce using rule 85 (addTypeId -> .)
    GT              reduce using rule 85 (addTypeId -> .)
    LT              reduce using rule 85 (addTypeId -> .)
    NOTEQUAL        reduce using rule 85 (addTypeId -> .)
    ISEQUAL         reduce using rule 85 (addTypeId -> .)
    EXCLAMATION     reduce using rule 85 (addTypeId -> .)
    QUESTION        reduce using rule 85 (addTypeId -> .)
    DOLLARSIGN      reduce using rule 85 (addTypeId -> .)
    AND             reduce using rule 85 (addTypeId -> .)
    OR              reduce using rule 85 (addTypeId -> .)
    RIGHTPAR        reduce using rule 85 (addTypeId -> .)
    COMA            reduce using rule 85 (addTypeId -> .)
    SEMICOLON       reduce using rule 85 (addTypeId -> .)
    LEFTBRACE       reduce using rule 85 (addTypeId -> .)

    addTypeId                      shift and go to state 175

state 138

    (43) cst_PDT -> CST_INT cstprimA1 .

    MULTIPLY        reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    DIVIDE          reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    PLUS            reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    MINUS           reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    GT              reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    LT              reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    NOTEQUAL        reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    ISEQUAL         reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    EXCLAMATION     reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    QUESTION        reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    DOLLARSIGN      reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    AND             reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    OR              reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    RIGHTPAR        reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    COMA            reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    SEMICOLON       reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)
    LEFTBRACE       reduce using rule 43 (cst_PDT -> CST_INT cstprimA1 .)


state 139

    (44) cst_PDT -> CST_FLOAT cstprimA2 .

    MULTIPLY        reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    DIVIDE          reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    PLUS            reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    MINUS           reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    GT              reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    LT              reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    NOTEQUAL        reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    ISEQUAL         reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    EXCLAMATION     reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    QUESTION        reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    DOLLARSIGN      reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    AND             reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    OR              reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    RIGHTPAR        reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    COMA            reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    SEMICOLON       reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)
    LEFTBRACE       reduce using rule 44 (cst_PDT -> CST_FLOAT cstprimA2 .)


state 140

    (45) cst_PDT -> CST_CHAR cstprimA3 .

    MULTIPLY        reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    DIVIDE          reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    PLUS            reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    MINUS           reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    GT              reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    LT              reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    NOTEQUAL        reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    ISEQUAL         reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    EXCLAMATION     reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    QUESTION        reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    DOLLARSIGN      reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    AND             reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    OR              reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    RIGHTPAR        reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    COMA            reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    SEMICOLON       reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)
    LEFTBRACE       reduce using rule 45 (cst_PDT -> CST_CHAR cstprimA3 .)


state 141

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR . createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (18) createJQif -> .

    THEN            reduce using rule 18 (createJQif -> .)

    createJQif                     shift and go to state 176

state 142

    (86) read -> READ LEFTPAR id_list RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 177


state 143

    (87) id_list -> ID addRead . id_listFunction
    (88) id_listFunction -> . COMA id_list
    (89) id_listFunction -> .

    COMA            shift and go to state 179
    RIGHTPAR        reduce using rule 89 (id_listFunction -> .)

    id_listFunction                shift and go to state 178

state 144

    (91) print -> PRINT LEFTPAR printFunction RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 180


state 145

    (92) printFunction -> print_param COMA . printFunction2
    (94) printFunction2 -> . printFunction
    (92) printFunction -> . print_param COMA printFunction2
    (93) printFunction -> . print_param
    (96) print_param -> . Expression2 addPrint
    (97) print_param -> . CST_STRING addPrintString
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    CST_STRING      shift and go to state 115
    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    print_param                    shift and go to state 113
    printFunction2                 shift and go to state 181
    printFunction                  shift and go to state 182
    Expression2                    shift and go to state 114
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 146

    (96) print_param -> Expression2 addPrint .

    COMA            reduce using rule 96 (print_param -> Expression2 addPrint .)
    RIGHTPAR        reduce using rule 96 (print_param -> Expression2 addPrint .)


state 147

    (97) print_param -> CST_STRING addPrintString .

    COMA            reduce using rule 97 (print_param -> CST_STRING addPrintString .)
    RIGHTPAR        reduce using rule 97 (print_param -> CST_STRING addPrintString .)


state 148

    (9) assignment -> ID EQUAL Expression2 SEMICOLON .

    RETURN          reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    IF              reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    COMMENT_TEXT    reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    READ            reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    PRINT           reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    ID              reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    VAR             reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    FOR             reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    WHILE           reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)
    RIGHTBRACE      reduce using rule 9 (assignment -> ID EQUAL Expression2 SEMICOLON .)


state 149

    (99) module -> ID LEFTPAR moduleFunction RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 183


state 150

    (111) moduleFunction -> Expression2 COMA . moduleFunction
    (111) moduleFunction -> . Expression2 COMA moduleFunction
    (112) moduleFunction -> . Expression2 RIGHTPAR
    (113) moduleFunction -> .
    (50) Expression2 -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (51) Expression2 -> . Expression3 opMatrix
    (52) Expression2 -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    RIGHTPAR        reduce using rule 113 (moduleFunction -> .)
    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression2                    shift and go to state 118
    moduleFunction                 shift and go to state 184
    Expression3                    shift and go to state 99
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 151

    (112) moduleFunction -> Expression2 RIGHTPAR .

    RIGHTPAR        reduce using rule 112 (moduleFunction -> Expression2 RIGHTPAR .)


state 152

    (23) for -> FOR forDeclaration TO Expression2 . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 185


state 153

    (24) forDeclaration -> ID EQUAL CST_INT .

    TO              reduce using rule 24 (forDeclaration -> ID EQUAL CST_INT .)


state 154

    (26) while -> WHILE LEFTPAR Expression2 RIGHTPAR . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 186


state 155

    (35) function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .

    FUNCTION        reduce using rule 35 (function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)
    MAIN            reduce using rule 35 (function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE .)


state 156

    (80) factor -> LEFTPAR Expression2 RIGHTPAR .

    MULTIPLY        reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    DIVIDE          reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    PLUS            reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    MINUS           reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    GT              reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    LT              reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    NOTEQUAL        reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    ISEQUAL         reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    EXCLAMATION     reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    QUESTION        reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    DOLLARSIGN      reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    AND             reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    OR              reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    RIGHTPAR        reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    COMA            reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    SEMICOLON       reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)
    LEFTBRACE       reduce using rule 80 (factor -> LEFTPAR Expression2 RIGHTPAR .)


state 157

    (16) return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON .

    RIGHTBRACE      reduce using rule 16 (return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON .)


state 158

    (50) Expression2 -> Expression3 Exp2A1 Expression22 . Expression2Nested
    (53) Expression2Nested -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (54) Expression2Nested -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression3                    shift and go to state 187
    Expression2Nested              shift and go to state 188
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 159

    (56) Expression22 -> AND . addOperator
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 189

state 160

    (57) Expression22 -> OR . addOperator
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 190

state 161

    (65) opMatrix -> EXCLAMATION addOperator .

    RIGHTPAR        reduce using rule 65 (opMatrix -> EXCLAMATION addOperator .)
    COMA            reduce using rule 65 (opMatrix -> EXCLAMATION addOperator .)
    SEMICOLON       reduce using rule 65 (opMatrix -> EXCLAMATION addOperator .)
    LEFTBRACE       reduce using rule 65 (opMatrix -> EXCLAMATION addOperator .)


state 162

    (66) opMatrix -> QUESTION addOperator .

    RIGHTPAR        reduce using rule 66 (opMatrix -> QUESTION addOperator .)
    COMA            reduce using rule 66 (opMatrix -> QUESTION addOperator .)
    SEMICOLON       reduce using rule 66 (opMatrix -> QUESTION addOperator .)
    LEFTBRACE       reduce using rule 66 (opMatrix -> QUESTION addOperator .)


state 163

    (67) opMatrix -> DOLLARSIGN addOperator .

    RIGHTPAR        reduce using rule 67 (opMatrix -> DOLLARSIGN addOperator .)
    COMA            reduce using rule 67 (opMatrix -> DOLLARSIGN addOperator .)
    SEMICOLON       reduce using rule 67 (opMatrix -> DOLLARSIGN addOperator .)
    LEFTBRACE       reduce using rule 67 (opMatrix -> DOLLARSIGN addOperator .)


state 164

    (58) Expression3 -> exp Exp3A1 Expression33 . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    exp                            shift and go to state 191
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 165

    (60) Expression33 -> GT . addOperator
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 192

state 166

    (61) Expression33 -> LT . addOperator
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 193

state 167

    (62) Expression33 -> NOTEQUAL . addOperator
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 194

state 168

    (63) Expression33 -> ISEQUAL . addOperator
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 195

state 169

    (68) exp -> term termA1 expFunction .

    GT              reduce using rule 68 (exp -> term termA1 expFunction .)
    LT              reduce using rule 68 (exp -> term termA1 expFunction .)
    NOTEQUAL        reduce using rule 68 (exp -> term termA1 expFunction .)
    ISEQUAL         reduce using rule 68 (exp -> term termA1 expFunction .)
    EXCLAMATION     reduce using rule 68 (exp -> term termA1 expFunction .)
    QUESTION        reduce using rule 68 (exp -> term termA1 expFunction .)
    DOLLARSIGN      reduce using rule 68 (exp -> term termA1 expFunction .)
    AND             reduce using rule 68 (exp -> term termA1 expFunction .)
    OR              reduce using rule 68 (exp -> term termA1 expFunction .)
    RIGHTPAR        reduce using rule 68 (exp -> term termA1 expFunction .)
    COMA            reduce using rule 68 (exp -> term termA1 expFunction .)
    SEMICOLON       reduce using rule 68 (exp -> term termA1 expFunction .)
    LEFTBRACE       reduce using rule 68 (exp -> term termA1 expFunction .)


state 170

    (71) expFunction -> PLUS . addOperator exp
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 196

state 171

    (72) expFunction -> MINUS . addOperator exp
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 197

state 172

    (74) term -> factor factorA1 termFunction .

    PLUS            reduce using rule 74 (term -> factor factorA1 termFunction .)
    MINUS           reduce using rule 74 (term -> factor factorA1 termFunction .)
    GT              reduce using rule 74 (term -> factor factorA1 termFunction .)
    LT              reduce using rule 74 (term -> factor factorA1 termFunction .)
    NOTEQUAL        reduce using rule 74 (term -> factor factorA1 termFunction .)
    ISEQUAL         reduce using rule 74 (term -> factor factorA1 termFunction .)
    EXCLAMATION     reduce using rule 74 (term -> factor factorA1 termFunction .)
    QUESTION        reduce using rule 74 (term -> factor factorA1 termFunction .)
    DOLLARSIGN      reduce using rule 74 (term -> factor factorA1 termFunction .)
    AND             reduce using rule 74 (term -> factor factorA1 termFunction .)
    OR              reduce using rule 74 (term -> factor factorA1 termFunction .)
    RIGHTPAR        reduce using rule 74 (term -> factor factorA1 termFunction .)
    COMA            reduce using rule 74 (term -> factor factorA1 termFunction .)
    SEMICOLON       reduce using rule 74 (term -> factor factorA1 termFunction .)
    LEFTBRACE       reduce using rule 74 (term -> factor factorA1 termFunction .)


state 173

    (77) termFunction -> MULTIPLY . addOperator term
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 198

state 174

    (78) termFunction -> DIVIDE . addOperator term
    (79) addOperator -> .

    LEFTPAR         reduce using rule 79 (addOperator -> .)
    ID              reduce using rule 79 (addOperator -> .)
    CST_INT         reduce using rule 79 (addOperator -> .)
    CST_FLOAT       reduce using rule 79 (addOperator -> .)
    CST_CHAR        reduce using rule 79 (addOperator -> .)

    addOperator                    shift and go to state 199

state 175

    (83) factor -> ID addOperand addTypeId .

    MULTIPLY        reduce using rule 83 (factor -> ID addOperand addTypeId .)
    DIVIDE          reduce using rule 83 (factor -> ID addOperand addTypeId .)
    PLUS            reduce using rule 83 (factor -> ID addOperand addTypeId .)
    MINUS           reduce using rule 83 (factor -> ID addOperand addTypeId .)
    GT              reduce using rule 83 (factor -> ID addOperand addTypeId .)
    LT              reduce using rule 83 (factor -> ID addOperand addTypeId .)
    NOTEQUAL        reduce using rule 83 (factor -> ID addOperand addTypeId .)
    ISEQUAL         reduce using rule 83 (factor -> ID addOperand addTypeId .)
    EXCLAMATION     reduce using rule 83 (factor -> ID addOperand addTypeId .)
    QUESTION        reduce using rule 83 (factor -> ID addOperand addTypeId .)
    DOLLARSIGN      reduce using rule 83 (factor -> ID addOperand addTypeId .)
    AND             reduce using rule 83 (factor -> ID addOperand addTypeId .)
    OR              reduce using rule 83 (factor -> ID addOperand addTypeId .)
    RIGHTPAR        reduce using rule 83 (factor -> ID addOperand addTypeId .)
    COMA            reduce using rule 83 (factor -> ID addOperand addTypeId .)
    SEMICOLON       reduce using rule 83 (factor -> ID addOperand addTypeId .)
    LEFTBRACE       reduce using rule 83 (factor -> ID addOperand addTypeId .)


state 176

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif . THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ

    THEN            shift and go to state 200


state 177

    (86) read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .

    RETURN          reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    IF              reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    COMMENT_TEXT    reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    READ            reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    PRINT           reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    ID              reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    VAR             reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)
    RIGHTBRACE      reduce using rule 86 (read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON .)


state 178

    (87) id_list -> ID addRead id_listFunction .

    RIGHTPAR        reduce using rule 87 (id_list -> ID addRead id_listFunction .)


state 179

    (88) id_listFunction -> COMA . id_list
    (87) id_list -> . ID addRead id_listFunction

    ID              shift and go to state 111

    id_list                        shift and go to state 201

state 180

    (91) print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .

    RETURN          reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    IF              reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    COMMENT_TEXT    reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    READ            reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    PRINT           reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    ID              reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    VAR             reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)
    RIGHTBRACE      reduce using rule 91 (print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON .)


state 181

    (92) printFunction -> print_param COMA printFunction2 .

    RIGHTPAR        reduce using rule 92 (printFunction -> print_param COMA printFunction2 .)


state 182

    (94) printFunction2 -> printFunction .

    RIGHTPAR        reduce using rule 94 (printFunction2 -> printFunction .)


state 183

    (99) module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .

    RETURN          reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    IF              reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    COMMENT_TEXT    reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    READ            reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    PRINT           reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    ID              reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    VAR             reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    RIGHTBRACE      reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    MULTIPLY        reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    DIVIDE          reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    PLUS            reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    MINUS           reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    GT              reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    LT              reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    NOTEQUAL        reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    ISEQUAL         reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    EXCLAMATION     reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    QUESTION        reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    DOLLARSIGN      reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    AND             reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    OR              reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    RIGHTPAR        reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    COMA            reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    SEMICOLON       reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)
    LEFTBRACE       reduce using rule 99 (module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON .)


state 184

    (111) moduleFunction -> Expression2 COMA moduleFunction .

    RIGHTPAR        reduce using rule 111 (moduleFunction -> Expression2 COMA moduleFunction .)


state 185

    (23) for -> FOR forDeclaration TO Expression2 LEFTBRACE . statement RIGHTBRACE
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 202
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 186

    (26) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE . statement RIGHTBRACE
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 203
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 187

    (53) Expression2Nested -> Expression3 . Exp2A1 Expression22 Expression2Nested
    (54) Expression2Nested -> Expression3 . Exp2A1
    (55) Exp2A1 -> .

    AND             reduce using rule 55 (Exp2A1 -> .)
    OR              reduce using rule 55 (Exp2A1 -> .)
    RIGHTPAR        reduce using rule 55 (Exp2A1 -> .)
    COMA            reduce using rule 55 (Exp2A1 -> .)
    SEMICOLON       reduce using rule 55 (Exp2A1 -> .)
    LEFTBRACE       reduce using rule 55 (Exp2A1 -> .)

    Exp2A1                         shift and go to state 204

state 188

    (50) Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .

    RIGHTPAR        reduce using rule 50 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    COMA            reduce using rule 50 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    SEMICOLON       reduce using rule 50 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    LEFTBRACE       reduce using rule 50 (Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested .)


state 189

    (56) Expression22 -> AND addOperator .

    LEFTPAR         reduce using rule 56 (Expression22 -> AND addOperator .)
    ID              reduce using rule 56 (Expression22 -> AND addOperator .)
    CST_INT         reduce using rule 56 (Expression22 -> AND addOperator .)
    CST_FLOAT       reduce using rule 56 (Expression22 -> AND addOperator .)
    CST_CHAR        reduce using rule 56 (Expression22 -> AND addOperator .)


state 190

    (57) Expression22 -> OR addOperator .

    LEFTPAR         reduce using rule 57 (Expression22 -> OR addOperator .)
    ID              reduce using rule 57 (Expression22 -> OR addOperator .)
    CST_INT         reduce using rule 57 (Expression22 -> OR addOperator .)
    CST_FLOAT       reduce using rule 57 (Expression22 -> OR addOperator .)
    CST_CHAR        reduce using rule 57 (Expression22 -> OR addOperator .)


state 191

    (58) Expression3 -> exp Exp3A1 Expression33 exp . Exp3A1
    (64) Exp3A1 -> .

    EXCLAMATION     reduce using rule 64 (Exp3A1 -> .)
    QUESTION        reduce using rule 64 (Exp3A1 -> .)
    DOLLARSIGN      reduce using rule 64 (Exp3A1 -> .)
    AND             reduce using rule 64 (Exp3A1 -> .)
    OR              reduce using rule 64 (Exp3A1 -> .)
    RIGHTPAR        reduce using rule 64 (Exp3A1 -> .)
    COMA            reduce using rule 64 (Exp3A1 -> .)
    SEMICOLON       reduce using rule 64 (Exp3A1 -> .)
    LEFTBRACE       reduce using rule 64 (Exp3A1 -> .)

    Exp3A1                         shift and go to state 205

state 192

    (60) Expression33 -> GT addOperator .

    LEFTPAR         reduce using rule 60 (Expression33 -> GT addOperator .)
    ID              reduce using rule 60 (Expression33 -> GT addOperator .)
    CST_INT         reduce using rule 60 (Expression33 -> GT addOperator .)
    CST_FLOAT       reduce using rule 60 (Expression33 -> GT addOperator .)
    CST_CHAR        reduce using rule 60 (Expression33 -> GT addOperator .)


state 193

    (61) Expression33 -> LT addOperator .

    LEFTPAR         reduce using rule 61 (Expression33 -> LT addOperator .)
    ID              reduce using rule 61 (Expression33 -> LT addOperator .)
    CST_INT         reduce using rule 61 (Expression33 -> LT addOperator .)
    CST_FLOAT       reduce using rule 61 (Expression33 -> LT addOperator .)
    CST_CHAR        reduce using rule 61 (Expression33 -> LT addOperator .)


state 194

    (62) Expression33 -> NOTEQUAL addOperator .

    LEFTPAR         reduce using rule 62 (Expression33 -> NOTEQUAL addOperator .)
    ID              reduce using rule 62 (Expression33 -> NOTEQUAL addOperator .)
    CST_INT         reduce using rule 62 (Expression33 -> NOTEQUAL addOperator .)
    CST_FLOAT       reduce using rule 62 (Expression33 -> NOTEQUAL addOperator .)
    CST_CHAR        reduce using rule 62 (Expression33 -> NOTEQUAL addOperator .)


state 195

    (63) Expression33 -> ISEQUAL addOperator .

    LEFTPAR         reduce using rule 63 (Expression33 -> ISEQUAL addOperator .)
    ID              reduce using rule 63 (Expression33 -> ISEQUAL addOperator .)
    CST_INT         reduce using rule 63 (Expression33 -> ISEQUAL addOperator .)
    CST_FLOAT       reduce using rule 63 (Expression33 -> ISEQUAL addOperator .)
    CST_CHAR        reduce using rule 63 (Expression33 -> ISEQUAL addOperator .)


state 196

    (71) expFunction -> PLUS addOperator . exp
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    exp                            shift and go to state 206
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 197

    (72) expFunction -> MINUS addOperator . exp
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    exp                            shift and go to state 207
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 198

    (77) termFunction -> MULTIPLY addOperator . term
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    term                           shift and go to state 208
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 199

    (78) termFunction -> DIVIDE addOperator . term
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    term                           shift and go to state 209
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 200

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN . LEFTBRACE statement RIGHTBRACE ifElse updateJQ

    LEFTBRACE       shift and go to state 210


state 201

    (88) id_listFunction -> COMA id_list .

    RIGHTPAR        reduce using rule 88 (id_listFunction -> COMA id_list .)


state 202

    (23) for -> FOR forDeclaration TO Expression2 LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 211


state 203

    (26) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 212


state 204

    (53) Expression2Nested -> Expression3 Exp2A1 . Expression22 Expression2Nested
    (54) Expression2Nested -> Expression3 Exp2A1 .
    (56) Expression22 -> . AND addOperator
    (57) Expression22 -> . OR addOperator

    RIGHTPAR        reduce using rule 54 (Expression2Nested -> Expression3 Exp2A1 .)
    COMA            reduce using rule 54 (Expression2Nested -> Expression3 Exp2A1 .)
    SEMICOLON       reduce using rule 54 (Expression2Nested -> Expression3 Exp2A1 .)
    LEFTBRACE       reduce using rule 54 (Expression2Nested -> Expression3 Exp2A1 .)
    AND             shift and go to state 159
    OR              shift and go to state 160

    Expression22                   shift and go to state 213

state 205

    (58) Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .

    EXCLAMATION     reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    QUESTION        reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    DOLLARSIGN      reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    AND             reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    OR              reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    RIGHTPAR        reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    COMA            reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    SEMICOLON       reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)
    LEFTBRACE       reduce using rule 58 (Expression3 -> exp Exp3A1 Expression33 exp Exp3A1 .)


state 206

    (71) expFunction -> PLUS addOperator exp .

    GT              reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    LT              reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    NOTEQUAL        reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    ISEQUAL         reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    EXCLAMATION     reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    QUESTION        reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    DOLLARSIGN      reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    AND             reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    OR              reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    RIGHTPAR        reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    COMA            reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    SEMICOLON       reduce using rule 71 (expFunction -> PLUS addOperator exp .)
    LEFTBRACE       reduce using rule 71 (expFunction -> PLUS addOperator exp .)


state 207

    (72) expFunction -> MINUS addOperator exp .

    GT              reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    LT              reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    NOTEQUAL        reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    ISEQUAL         reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    EXCLAMATION     reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    QUESTION        reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    DOLLARSIGN      reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    AND             reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    OR              reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    RIGHTPAR        reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    COMA            reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    SEMICOLON       reduce using rule 72 (expFunction -> MINUS addOperator exp .)
    LEFTBRACE       reduce using rule 72 (expFunction -> MINUS addOperator exp .)


state 208

    (77) termFunction -> MULTIPLY addOperator term .

    PLUS            reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    MINUS           reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    GT              reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    LT              reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    NOTEQUAL        reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    ISEQUAL         reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    EXCLAMATION     reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    QUESTION        reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    DOLLARSIGN      reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    AND             reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    OR              reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    RIGHTPAR        reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    COMA            reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    SEMICOLON       reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)
    LEFTBRACE       reduce using rule 77 (termFunction -> MULTIPLY addOperator term .)


state 209

    (78) termFunction -> DIVIDE addOperator term .

    PLUS            reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    MINUS           reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    GT              reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    LT              reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    NOTEQUAL        reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    ISEQUAL         reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    EXCLAMATION     reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    QUESTION        reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    DOLLARSIGN      reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    AND             reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    OR              reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    RIGHTPAR        reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    COMA            reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    SEMICOLON       reduce using rule 78 (termFunction -> DIVIDE addOperator term .)
    LEFTBRACE       reduce using rule 78 (termFunction -> DIVIDE addOperator term .)


state 210

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE . statement RIGHTBRACE ifElse updateJQ
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 214
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 211

    (23) for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .

    RETURN          reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    IF              reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    READ            reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    PRINT           reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    ID              reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    VAR             reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    FOR             reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    WHILE           reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 23 (for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE .)


state 212

    (26) while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .

    RETURN          reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    IF              reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    READ            reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    PRINT           reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    ID              reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    VAR             reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    FOR             reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    WHILE           reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 26 (while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE .)


state 213

    (53) Expression2Nested -> Expression3 Exp2A1 Expression22 . Expression2Nested
    (53) Expression2Nested -> . Expression3 Exp2A1 Expression22 Expression2Nested
    (54) Expression2Nested -> . Expression3 Exp2A1
    (58) Expression3 -> . exp Exp3A1 Expression33 exp Exp3A1
    (59) Expression3 -> . exp Exp3A1
    (68) exp -> . term termA1 expFunction
    (69) exp -> . term termA1
    (74) term -> . factor factorA1 termFunction
    (75) term -> . factor factorA1
    (80) factor -> . LEFTPAR Expression2 RIGHTPAR
    (81) factor -> . cst_PDT addOperand
    (82) factor -> . module
    (83) factor -> . ID addOperand addTypeId
    (43) cst_PDT -> . CST_INT cstprimA1
    (44) cst_PDT -> . CST_FLOAT cstprimA2
    (45) cst_PDT -> . CST_CHAR cstprimA3
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97
    ID              shift and go to state 105
    CST_INT         shift and go to state 106
    CST_FLOAT       shift and go to state 107
    CST_CHAR        shift and go to state 108

    Expression3                    shift and go to state 187
    Expression2Nested              shift and go to state 215
    exp                            shift and go to state 100
    term                           shift and go to state 101
    factor                         shift and go to state 102
    cst_PDT                        shift and go to state 103
    module                         shift and go to state 104

state 214

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement . RIGHTBRACE ifElse updateJQ

    RIGHTBRACE      shift and go to state 216


state 215

    (53) Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .

    RIGHTPAR        reduce using rule 53 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    COMA            reduce using rule 53 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    SEMICOLON       reduce using rule 53 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)
    LEFTBRACE       reduce using rule 53 (Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested .)


state 216

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE . ifElse updateJQ
    (20) ifElse -> . ELSE createJQelse LEFTBRACE statement RIGHTBRACE
    (21) ifElse -> .

    ELSE            shift and go to state 218
    RETURN          reduce using rule 21 (ifElse -> .)
    IF              reduce using rule 21 (ifElse -> .)
    COMMENT_TEXT    reduce using rule 21 (ifElse -> .)
    READ            reduce using rule 21 (ifElse -> .)
    PRINT           reduce using rule 21 (ifElse -> .)
    ID              reduce using rule 21 (ifElse -> .)
    VAR             reduce using rule 21 (ifElse -> .)
    FOR             reduce using rule 21 (ifElse -> .)
    WHILE           reduce using rule 21 (ifElse -> .)
    RIGHTBRACE      reduce using rule 21 (ifElse -> .)

    ifElse                         shift and go to state 217

state 217

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse . updateJQ
    (19) updateJQ -> .

    RETURN          reduce using rule 19 (updateJQ -> .)
    IF              reduce using rule 19 (updateJQ -> .)
    COMMENT_TEXT    reduce using rule 19 (updateJQ -> .)
    READ            reduce using rule 19 (updateJQ -> .)
    PRINT           reduce using rule 19 (updateJQ -> .)
    ID              reduce using rule 19 (updateJQ -> .)
    VAR             reduce using rule 19 (updateJQ -> .)
    FOR             reduce using rule 19 (updateJQ -> .)
    WHILE           reduce using rule 19 (updateJQ -> .)
    RIGHTBRACE      reduce using rule 19 (updateJQ -> .)

    updateJQ                       shift and go to state 219

state 218

    (20) ifElse -> ELSE . createJQelse LEFTBRACE statement RIGHTBRACE
    (22) createJQelse -> .

    LEFTBRACE       reduce using rule 22 (createJQelse -> .)

    createJQelse                   shift and go to state 220

state 219

    (17) if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .

    RETURN          reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    IF              reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    COMMENT_TEXT    reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    READ            reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    PRINT           reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    ID              reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    VAR             reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    FOR             reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    WHILE           reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)
    RIGHTBRACE      reduce using rule 17 (if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ .)


state 220

    (20) ifElse -> ELSE createJQelse . LEFTBRACE statement RIGHTBRACE

    LEFTBRACE       shift and go to state 221


state 221

    (20) ifElse -> ELSE createJQelse LEFTBRACE . statement RIGHTBRACE
    (100) statement -> . return
    (101) statement -> . if statement
    (102) statement -> . comment statement
    (103) statement -> . read statement
    (104) statement -> . print statement
    (105) statement -> . assignment statement
    (106) statement -> . declaration statement
    (107) statement -> . module statement
    (108) statement -> . for statement
    (109) statement -> . while statement
    (110) statement -> .
    (16) return -> . RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON
    (17) if -> . IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ
    (25) comment -> . COMMENT_TEXT
    (86) read -> . READ LEFTPAR id_list RIGHTPAR SEMICOLON
    (91) print -> . PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON
    (9) assignment -> . ID EQUAL Expression2 SEMICOLON
    (10) declaration -> . VAR declarationPDT
    (99) module -> . ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON
    (23) for -> . FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE
    (26) while -> . WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE

    RIGHTBRACE      reduce using rule 110 (statement -> .)
    RETURN          shift and go to state 60
    IF              shift and go to state 61
    COMMENT_TEXT    shift and go to state 62
    READ            shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 65
    VAR             shift and go to state 8
    FOR             shift and go to state 66
    WHILE           shift and go to state 67

    statement                      shift and go to state 222
    return                         shift and go to state 50
    if                             shift and go to state 51
    comment                        shift and go to state 52
    read                           shift and go to state 53
    print                          shift and go to state 54
    assignment                     shift and go to state 55
    declaration                    shift and go to state 56
    module                         shift and go to state 57
    for                            shift and go to state 58
    while                          shift and go to state 59

state 222

    (20) ifElse -> ELSE createJQelse LEFTBRACE statement . RIGHTBRACE

    RIGHTBRACE      shift and go to state 223


state 223

    (20) ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .

    RETURN          reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    IF              reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    COMMENT_TEXT    reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    READ            reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    PRINT           reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    ID              reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    VAR             reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    FOR             reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    WHILE           reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 20 (ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE .)

