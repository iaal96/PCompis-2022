
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA COMMENT_TEXT CST_CHAR CST_FLOAT CST_INT CST_STRING DIVIDE DOLLARSIGN ELSE EQUAL EXCLAMATION FLOAT FOR FUNCTION GT ID IF INT ISEQUAL LEFTBRACE LEFTBRACK LEFTPAR LT MAIN MINUS MULTIPLY NOTEQUAL OR PLUS PRINT PROGRAM QUESTION READ RETURN RIGHTBRACE RIGHTBRACK RIGHTPAR SEMICOLON THEN TO VAR VOID WHILEprogram : PROGRAM ID programA1 SEMICOLON programVars programFunc mainprogramA1 : main : mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACEmainA1 : programVars : declaration\n\t\t\t\t   | programFunc : function programFunc\n\t\t\t\t   | assignment : ID EQUAL Expression2 SEMICOLONdeclaration : VAR declarationPDTdeclarationPDT : PDT vars SEMICOLON declarationPDT\n\t\t\t\t\t   | PDT : INT\n\t\t\t\t | FLOAT\n\t\t\t\t | CHAR return : RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLONif : IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQcreateJQif : updateJQ : ifElse : ELSE createJQelse LEFTBRACE statement RIGHTBRACE\n\t\t\t  | createJQelse : for : FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACEforDeclaration : ID EQUAL CST_INTcomment : COMMENT_TEXTwhile : WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACEvars : ID varsA1 varsArray varsComavarsA1 : varsComa : COMA vars\n\t\t\t\t| varsMatrix : LEFTBRACK CST_INT RIGHTBRACK\n\t\t\t\t  | varsArray : LEFTBRACK CST_INT RIGHTBRACK varsMatrix\n\t\t\t\t | function : functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE\n                | functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE param : PDT ID paramA1 functionParamfunctionParam : COMA param\n\t\t\t\t\t | paramA1 : functionType : FUNCTION PDT\n\t\t\t\t\t| FUNCTION VOID functionTypeA1cst_PDT : CST_INT cstprimA1\n\t\t\t\t| CST_FLOAT cstprimA2\n\t\t\t\t| CST_CHAR cstprimA3cstprimA1 : cstprimA2 : cstprimA3 : functionA1 : Expression2 : Expression3 Exp2A1 Expression22 Expression2Nested\n                       | Expression3 opMatrix \n                       | Expression3 Exp2A1Expression2Nested : Expression3 Exp2A1 Expression22 Expression2Nested\n                             | Expression3 Exp2A1Exp2A1 : Expression22 : AND addOperator\n                    | OR addOperatorExpression3 : exp Exp3A1 Expression33 exp Exp3A1\n                       | exp Exp3A1Expression33 : GT addOperator\n\t\t\t\t\t\t | LT addOperator\n\t\t\t\t\t\t | NOTEQUAL addOperator \n\t\t\t\t\t\t | ISEQUAL addOperatorExp3A1 : opMatrix : EXCLAMATION addOperator\n\t\t\t\t| QUESTION addOperator\n\t\t\t\t| DOLLARSIGN addOperator exp : term termA1 expFunction\n\t\t   | term termA1 termA1 : expFunction : PLUS addOperator exp\n                   | MINUS addOperator exp functionTypeA1 : term : factor factorA1 termFunction\n            | factor factorA1factorA1 : termFunction : MULTIPLY addOperator term\n\t\t\t\t\t| DIVIDE addOperator term addOperator : factor : LEFTPAR Expression2 RIGHTPAR\n\t\t\t  | cst_PDT addOperand\n\t\t\t  | module\n\t\t\t  | ID addOperand addTypeIdaddOperand : addTypeId : read : READ LEFTPAR id_list RIGHTPAR SEMICOLONid_list : ID addRead id_listFunctionid_listFunction : COMA id_list\n\t\t\t\t\t   | addRead : print : PRINT LEFTPAR printFunction RIGHTPAR SEMICOLONprintFunction : print_param COMA printFunction2\n\t\t\t\t\t | print_param printFunction2 : printFunctionaddPrint : print_param : Expression2 addPrint\n\t\t\t\t   | CST_STRING addPrintString addPrintString : module : ID LEFTPAR moduleFunction RIGHTPAR SEMICOLONstatement : return\n\t\t\t\t | if statement\n\t\t\t\t | comment statement\n\t\t\t\t | read statement\n\t\t\t\t | print statement\n\t\t\t\t | assignment statement\n\t\t\t\t | declaration statement\n\t\t\t\t | module statement\n\t\t\t\t | for statement\n\t\t\t\t | while statement \n\t\t\t\t | moduleFunction : Expression2 COMA moduleFunction\n\t\t\t\t\t  | Expression2 RIGHTPAR\n\t\t\t\t\t  | '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,73,],[0,-1,-3,]),'ID':([2,8,11,13,14,15,16,17,22,23,28,29,33,39,41,43,51,52,53,54,55,56,57,58,59,62,66,69,83,84,85,86,87,88,91,92,97,119,145,148,150,158,159,160,164,165,166,167,168,170,171,173,174,177,179,180,183,185,186,189,190,192,193,194,195,196,197,198,199,210,211,212,213,216,217,219,221,223,],[3,-12,21,-10,25,-13,-14,-15,-41,-73,-42,-12,-11,46,25,65,65,65,65,65,65,65,65,65,65,-25,90,65,105,105,111,105,105,105,105,65,105,105,105,-9,105,105,-79,-79,105,-79,-79,-79,-79,-79,-79,-79,-79,-86,111,-91,-99,65,65,-56,-57,-60,-61,-62,-63,105,105,105,105,65,-23,-26,105,-21,-19,-17,65,-20,]),'SEMICOLON':([3,4,24,25,30,34,38,40,44,47,48,72,99,100,101,102,103,104,105,106,107,108,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,142,144,149,156,161,162,163,169,172,175,183,187,188,191,204,205,206,207,208,209,215,],[-2,5,29,-28,-34,-30,45,-27,68,-29,-32,-33,-55,-64,-70,-76,-84,-82,-84,-46,-47,-48,148,-31,157,-52,-51,-79,-79,-79,-59,-69,-75,-81,-85,-43,-44,-45,177,180,183,-80,-65,-66,-67,-68,-74,-83,-99,-55,-50,-64,-54,-58,-71,-72,-77,-78,-53,]),'FUNCTION':([5,6,7,8,10,13,29,33,123,155,],[-6,12,-5,-12,12,-10,-12,-11,-36,-35,]),'MAIN':([5,6,7,8,9,10,13,19,20,29,33,123,155,],[-6,-8,-5,-12,-4,-8,-10,26,-7,-12,-11,-36,-35,]),'VAR':([5,8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[8,-12,-10,-12,-11,8,8,8,8,8,8,8,8,8,8,-25,8,8,-9,-86,-91,-99,8,8,8,-23,-26,-21,-19,-17,8,-20,]),'RETURN':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,60,60,60,60,60,60,60,60,60,60,-25,60,60,-9,-86,-91,-99,60,60,60,-23,-26,-21,-19,-17,60,-20,]),'IF':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,61,61,61,61,61,61,61,61,61,61,-25,61,61,-9,-86,-91,-99,61,61,61,-23,-26,-21,-19,-17,61,-20,]),'COMMENT_TEXT':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,62,62,62,62,62,62,62,62,62,62,-25,62,62,-9,-86,-91,-99,62,62,62,-23,-26,-21,-19,-17,62,-20,]),'READ':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,63,63,63,63,63,63,63,63,63,63,-25,63,63,-9,-86,-91,-99,63,63,63,-23,-26,-21,-19,-17,63,-20,]),'PRINT':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,64,64,64,64,64,64,64,64,64,64,-25,64,64,-9,-86,-91,-99,64,64,64,-23,-26,-21,-19,-17,64,-20,]),'FOR':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,66,66,66,66,66,66,66,66,66,66,-25,66,66,-9,-86,-91,-99,66,66,66,-23,-26,-21,-19,-17,66,-20,]),'WHILE':([8,13,29,33,43,51,52,53,54,55,56,57,58,59,62,69,92,148,177,180,183,185,186,210,211,212,216,217,219,221,223,],[-12,-10,-12,-11,67,67,67,67,67,67,67,67,67,67,-25,67,67,-9,-86,-91,-99,67,67,67,-23,-26,-21,-19,-17,67,-20,]),'RIGHTBRACE':([8,13,29,33,43,49,50,51,52,53,54,55,56,57,58,59,62,69,74,75,76,77,78,79,80,81,82,92,93,122,148,157,177,180,183,185,186,202,203,210,211,212,214,216,217,219,221,222,223,],[-12,-10,-12,-11,-110,73,-100,-110,-110,-110,-110,-110,-110,-110,-110,-110,-25,-110,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,123,155,-9,-16,-86,-91,-99,-110,-110,211,212,-110,-23,-26,216,-21,-19,-17,-110,223,-20,]),'INT':([8,12,29,32,95,],[15,15,15,15,15,]),'FLOAT':([8,12,29,32,95,],[16,16,16,16,16,]),'CHAR':([8,12,29,32,95,],[17,17,17,17,17,]),'VOID':([12,],[23,]),'LEFTPAR':([21,26,27,60,61,63,64,65,67,83,84,86,87,88,91,97,105,119,145,150,158,159,160,164,165,166,167,168,170,171,173,174,189,190,192,193,194,195,196,197,198,199,213,],[-49,31,32,83,84,85,86,88,91,97,97,97,97,97,97,97,88,97,97,97,97,-79,-79,97,-79,-79,-79,-79,-79,-79,-79,-79,-56,-57,-60,-61,-62,-63,97,97,97,97,97,]),'LEFTBRACK':([25,30,48,],[-28,35,71,]),'COMA':([25,30,34,46,48,70,72,99,100,101,102,103,104,105,106,107,108,111,113,114,115,118,125,128,129,130,131,132,133,134,135,136,137,138,139,140,143,146,147,156,161,162,163,169,172,175,183,187,188,191,204,205,206,207,208,209,215,],[-28,-34,41,-40,-32,95,-33,-55,-64,-70,-76,-84,-82,-84,-46,-47,-48,-90,145,-95,-98,150,-31,-52,-51,-79,-79,-79,-59,-69,-75,-81,-85,-43,-44,-45,179,-96,-97,-80,-65,-66,-67,-68,-74,-83,-99,-55,-50,-64,-54,-58,-71,-72,-77,-78,-53,]),'RIGHTPAR':([31,32,37,46,70,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,121,124,126,128,129,130,131,132,133,134,135,136,137,138,139,140,143,146,147,150,151,156,161,162,163,169,172,175,178,181,182,183,184,187,188,191,201,204,205,206,207,208,209,215,],[36,38,44,-40,-39,-113,-37,127,-55,-64,-70,-76,-84,-82,-84,-46,-47,-48,141,142,-90,144,-93,-95,-98,149,151,154,-38,156,-52,-51,-79,-79,-79,-59,-69,-75,-81,-85,-43,-44,-45,-89,-96,-97,-113,-112,-80,-65,-66,-67,-68,-74,-83,-87,-92,-94,-99,-111,-55,-50,-64,-88,-54,-58,-71,-72,-77,-78,-53,]),'CST_INT':([35,71,83,84,86,87,88,91,97,119,120,145,150,158,159,160,164,165,166,167,168,170,171,173,174,189,190,192,193,194,195,196,197,198,199,213,],[42,96,106,106,106,106,106,106,106,106,153,106,106,106,-79,-79,106,-79,-79,-79,-79,-79,-79,-79,-79,-56,-57,-60,-61,-62,-63,106,106,106,106,106,]),'LEFTBRACE':([36,45,68,99,100,101,102,103,104,105,106,107,108,128,129,130,131,132,133,134,135,136,137,138,139,140,152,154,156,161,162,163,169,172,175,183,187,188,191,200,204,205,206,207,208,209,215,218,220,],[43,69,92,-55,-64,-70,-76,-84,-82,-84,-46,-47,-48,-52,-51,-79,-79,-79,-59,-69,-75,-81,-85,-43,-44,-45,185,186,-80,-65,-66,-67,-68,-74,-83,-99,-55,-50,-64,210,-54,-58,-71,-72,-77,-78,-53,-22,221,]),'RIGHTBRACK':([42,96,],[48,125,]),'EQUAL':([65,90,],[87,120,]),'CST_FLOAT':([83,84,86,87,88,91,97,119,145,150,158,159,160,164,165,166,167,168,170,171,173,174,189,190,192,193,194,195,196,197,198,199,213,],[107,107,107,107,107,107,107,107,107,107,107,-79,-79,107,-79,-79,-79,-79,-79,-79,-79,-79,-56,-57,-60,-61,-62,-63,107,107,107,107,107,]),'CST_CHAR':([83,84,86,87,88,91,97,119,145,150,158,159,160,164,165,166,167,168,170,171,173,174,189,190,192,193,194,195,196,197,198,199,213,],[108,108,108,108,108,108,108,108,108,108,108,-79,-79,108,-79,-79,-79,-79,-79,-79,-79,-79,-56,-57,-60,-61,-62,-63,108,108,108,108,108,]),'CST_STRING':([86,145,],[115,115,]),'TO':([89,153,],[119,-24,]),'AND':([99,100,101,102,103,104,105,106,107,108,128,133,134,135,136,137,138,139,140,156,169,172,175,183,187,191,204,205,206,207,208,209,],[-55,-64,-70,-76,-84,-82,-84,-46,-47,-48,159,-59,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-55,-64,159,-58,-71,-72,-77,-78,]),'OR':([99,100,101,102,103,104,105,106,107,108,128,133,134,135,136,137,138,139,140,156,169,172,175,183,187,191,204,205,206,207,208,209,],[-55,-64,-70,-76,-84,-82,-84,-46,-47,-48,160,-59,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-55,-64,160,-58,-71,-72,-77,-78,]),'EXCLAMATION':([99,100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,191,205,206,207,208,209,],[130,-64,-70,-76,-84,-82,-84,-46,-47,-48,-59,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-64,-58,-71,-72,-77,-78,]),'QUESTION':([99,100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,191,205,206,207,208,209,],[131,-64,-70,-76,-84,-82,-84,-46,-47,-48,-59,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-64,-58,-71,-72,-77,-78,]),'DOLLARSIGN':([99,100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,191,205,206,207,208,209,],[132,-64,-70,-76,-84,-82,-84,-46,-47,-48,-59,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-64,-58,-71,-72,-77,-78,]),'GT':([100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,206,207,208,209,],[-64,-70,-76,-84,-82,-84,-46,-47,-48,165,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-71,-72,-77,-78,]),'LT':([100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,206,207,208,209,],[-64,-70,-76,-84,-82,-84,-46,-47,-48,166,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-71,-72,-77,-78,]),'NOTEQUAL':([100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,206,207,208,209,],[-64,-70,-76,-84,-82,-84,-46,-47,-48,167,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-71,-72,-77,-78,]),'ISEQUAL':([100,101,102,103,104,105,106,107,108,133,134,135,136,137,138,139,140,156,169,172,175,183,206,207,208,209,],[-64,-70,-76,-84,-82,-84,-46,-47,-48,168,-69,-75,-81,-85,-43,-44,-45,-80,-68,-74,-83,-99,-71,-72,-77,-78,]),'PLUS':([101,102,103,104,105,106,107,108,134,135,136,137,138,139,140,156,172,175,183,208,209,],[-70,-76,-84,-82,-84,-46,-47,-48,170,-75,-81,-85,-43,-44,-45,-80,-74,-83,-99,-77,-78,]),'MINUS':([101,102,103,104,105,106,107,108,134,135,136,137,138,139,140,156,172,175,183,208,209,],[-70,-76,-84,-82,-84,-46,-47,-48,171,-75,-81,-85,-43,-44,-45,-80,-74,-83,-99,-77,-78,]),'MULTIPLY':([102,103,104,105,106,107,108,135,136,137,138,139,140,156,175,183,],[-76,-84,-82,-84,-46,-47,-48,173,-81,-85,-43,-44,-45,-80,-83,-99,]),'DIVIDE':([102,103,104,105,106,107,108,135,136,137,138,139,140,156,175,183,],[-76,-84,-82,-84,-46,-47,-48,174,-81,-85,-43,-44,-45,-80,-83,-99,]),'THEN':([141,176,],[-18,200,]),'ELSE':([216,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programA1':([3,],[4,]),'programVars':([5,],[6,]),'declaration':([5,43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[7,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'programFunc':([6,10,],[9,20,]),'function':([6,10,],[10,10,]),'functionType':([6,10,],[11,11,]),'declarationPDT':([8,29,],[13,33,]),'PDT':([8,12,29,32,95,],[14,22,14,39,39,]),'main':([9,],[18,]),'mainA1':([9,],[19,]),'vars':([14,41,],[24,47,]),'functionA1':([21,],[27,]),'functionTypeA1':([23,],[28,]),'varsA1':([25,],[30,]),'varsArray':([30,],[34,]),'param':([32,95,],[37,124,]),'varsComa':([34,],[40,]),'statement':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[49,74,75,76,77,78,79,80,81,82,93,122,202,203,214,222,]),'return':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'if':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'comment':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'read':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'print':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'assignment':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'module':([43,51,52,53,54,55,56,57,58,59,69,83,84,86,87,88,91,92,97,119,145,150,158,164,185,186,196,197,198,199,210,213,221,],[57,57,57,57,57,57,57,57,57,57,57,104,104,104,104,104,104,57,104,104,104,104,104,104,57,57,104,104,104,104,57,104,57,]),'for':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'while':([43,51,52,53,54,55,56,57,58,59,69,92,185,186,210,221,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'paramA1':([46,],[70,]),'varsMatrix':([48,],[72,]),'forDeclaration':([66,],[89,]),'functionParam':([70,],[94,]),'Expression2':([83,84,86,87,88,91,97,119,145,150,],[98,109,114,116,118,121,126,152,114,118,]),'Expression3':([83,84,86,87,88,91,97,119,145,150,158,213,],[99,99,99,99,99,99,99,99,99,99,187,187,]),'exp':([83,84,86,87,88,91,97,119,145,150,158,164,196,197,213,],[100,100,100,100,100,100,100,100,100,100,100,191,206,207,100,]),'term':([83,84,86,87,88,91,97,119,145,150,158,164,196,197,198,199,213,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,208,209,101,]),'factor':([83,84,86,87,88,91,97,119,145,150,158,164,196,197,198,199,213,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'cst_PDT':([83,84,86,87,88,91,97,119,145,150,158,164,196,197,198,199,213,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'id_list':([85,179,],[110,201,]),'printFunction':([86,145,],[112,182,]),'print_param':([86,145,],[113,113,]),'moduleFunction':([88,150,],[117,184,]),'Exp2A1':([99,187,],[128,204,]),'opMatrix':([99,],[129,]),'Exp3A1':([100,191,],[133,205,]),'termA1':([101,],[134,]),'factorA1':([102,],[135,]),'addOperand':([103,105,],[136,137,]),'cstprimA1':([106,],[138,]),'cstprimA2':([107,],[139,]),'cstprimA3':([108,],[140,]),'addRead':([111,],[143,]),'addPrint':([114,],[146,]),'addPrintString':([115,],[147,]),'Expression22':([128,204,],[158,213,]),'addOperator':([130,131,132,159,160,165,166,167,168,170,171,173,174,],[161,162,163,189,190,192,193,194,195,196,197,198,199,]),'Expression33':([133,],[164,]),'expFunction':([134,],[169,]),'termFunction':([135,],[172,]),'addTypeId':([137,],[175,]),'createJQif':([141,],[176,]),'id_listFunction':([143,],[178,]),'printFunction2':([145,],[181,]),'Expression2Nested':([158,213,],[188,215,]),'ifElse':([216,],[217,]),'updateJQ':([217,],[219,]),'createJQelse':([218,],[220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID programA1 SEMICOLON programVars programFunc main','program',7,'p_program','parser.py',11),
  ('programA1 -> <empty>','programA1',0,'p_globalTable','parser.py',31),
  ('main -> mainA1 MAIN LEFTPAR RIGHTPAR LEFTBRACE statement RIGHTBRACE','main',7,'p_main','parser.py',46),
  ('mainA1 -> <empty>','mainA1',0,'p_mainTable','parser.py',49),
  ('programVars -> declaration','programVars',1,'p_programVars','parser.py',61),
  ('programVars -> <empty>','programVars',0,'p_programVars','parser.py',62),
  ('programFunc -> function programFunc','programFunc',2,'p_programFunc','parser.py',65),
  ('programFunc -> <empty>','programFunc',0,'p_programFunc','parser.py',66),
  ('assignment -> ID EQUAL Expression2 SEMICOLON','assignment',4,'p_assignment','parser.py',69),
  ('declaration -> VAR declarationPDT','declaration',2,'p_declaration','parser.py',87),
  ('declarationPDT -> PDT vars SEMICOLON declarationPDT','declarationPDT',4,'p_declarationPDT','parser.py',91),
  ('declarationPDT -> <empty>','declarationPDT',0,'p_declarationPDT','parser.py',92),
  ('PDT -> INT','PDT',1,'p_PDT','parser.py',95),
  ('PDT -> FLOAT','PDT',1,'p_PDT','parser.py',96),
  ('PDT -> CHAR','PDT',1,'p_PDT','parser.py',97),
  ('return -> RETURN LEFTPAR Expression2 RIGHTPAR SEMICOLON','return',5,'p_return','parser.py',104),
  ('if -> IF LEFTPAR Expression2 RIGHTPAR createJQif THEN LEFTBRACE statement RIGHTBRACE ifElse updateJQ','if',11,'p_if','parser.py',107),
  ('createJQif -> <empty>','createJQif',0,'p_createJQif','parser.py',111),
  ('updateJQ -> <empty>','updateJQ',0,'p_updateJQ','parser.py',129),
  ('ifElse -> ELSE createJQelse LEFTBRACE statement RIGHTBRACE','ifElse',5,'p_ifElse','parser.py',136),
  ('ifElse -> <empty>','ifElse',0,'p_ifElse','parser.py',137),
  ('createJQelse -> <empty>','createJQelse',0,'p_createJQelse','parser.py',141),
  ('for -> FOR forDeclaration TO Expression2 LEFTBRACE statement RIGHTBRACE','for',7,'p_for','parser.py',152),
  ('forDeclaration -> ID EQUAL CST_INT','forDeclaration',3,'p_forDeclaration','parser.py',155),
  ('comment -> COMMENT_TEXT','comment',1,'p_comment','parser.py',158),
  ('while -> WHILE LEFTPAR Expression2 RIGHTPAR LEFTBRACE statement RIGHTBRACE','while',7,'p_while','parser.py',161),
  ('vars -> ID varsA1 varsArray varsComa','vars',4,'p_vars','parser.py',164),
  ('varsA1 -> <empty>','varsA1',0,'p_addToTable','parser.py',167),
  ('varsComa -> COMA vars','varsComa',2,'p_varsComa','parser.py',177),
  ('varsComa -> <empty>','varsComa',0,'p_varsComa','parser.py',178),
  ('varsMatrix -> LEFTBRACK CST_INT RIGHTBRACK','varsMatrix',3,'p_varsMatrix','parser.py',181),
  ('varsMatrix -> <empty>','varsMatrix',0,'p_varsMatrix','parser.py',182),
  ('varsArray -> LEFTBRACK CST_INT RIGHTBRACK varsMatrix','varsArray',4,'p_varsArray','parser.py',185),
  ('varsArray -> <empty>','varsArray',0,'p_varsArray','parser.py',186),
  ('function -> functionType ID functionA1 LEFTPAR param RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE','function',10,'p_function','parser.py',189),
  ('function -> functionType ID functionA1 LEFTPAR RIGHTPAR SEMICOLON LEFTBRACE statement RIGHTBRACE','function',9,'p_function','parser.py',190),
  ('param -> PDT ID paramA1 functionParam','param',4,'p_param','parser.py',198),
  ('functionParam -> COMA param','functionParam',2,'p_functionParam','parser.py',201),
  ('functionParam -> <empty>','functionParam',0,'p_functionParam','parser.py',202),
  ('paramA1 -> <empty>','paramA1',0,'p_addFuncParams','parser.py',205),
  ('functionType -> FUNCTION PDT','functionType',2,'p_functionType','parser.py',215),
  ('functionType -> FUNCTION VOID functionTypeA1','functionType',3,'p_functionType','parser.py',216),
  ('cst_PDT -> CST_INT cstprimA1','cst_PDT',2,'p_cst_PDT','parser.py',219),
  ('cst_PDT -> CST_FLOAT cstprimA2','cst_PDT',2,'p_cst_PDT','parser.py',220),
  ('cst_PDT -> CST_CHAR cstprimA3','cst_PDT',2,'p_cst_PDT','parser.py',221),
  ('cstprimA1 -> <empty>','cstprimA1',0,'p_addTypeInt','parser.py',225),
  ('cstprimA2 -> <empty>','cstprimA2',0,'p_addTypeFloat','parser.py',229),
  ('cstprimA3 -> <empty>','cstprimA3',0,'p_addTypeChar','parser.py',233),
  ('functionA1 -> <empty>','functionA1',0,'p_addToDir','parser.py',237),
  ('Expression2 -> Expression3 Exp2A1 Expression22 Expression2Nested','Expression2',4,'p_Expression2','parser.py',257),
  ('Expression2 -> Expression3 opMatrix','Expression2',2,'p_Expression2','parser.py',258),
  ('Expression2 -> Expression3 Exp2A1','Expression2',2,'p_Expression2','parser.py',259),
  ('Expression2Nested -> Expression3 Exp2A1 Expression22 Expression2Nested','Expression2Nested',4,'p_Expression2Nested','parser.py',262),
  ('Expression2Nested -> Expression3 Exp2A1','Expression2Nested',2,'p_Expression2Nested','parser.py',263),
  ('Exp2A1 -> <empty>','Exp2A1',0,'p_opConsumeExp2','parser.py',267),
  ('Expression22 -> AND addOperator','Expression22',2,'p_Expression22','parser.py',293),
  ('Expression22 -> OR addOperator','Expression22',2,'p_Expression22','parser.py',294),
  ('Expression3 -> exp Exp3A1 Expression33 exp Exp3A1','Expression3',5,'p_Expression3','parser.py',297),
  ('Expression3 -> exp Exp3A1','Expression3',2,'p_Expression3','parser.py',298),
  ('Expression33 -> GT addOperator','Expression33',2,'p_Expression33','parser.py',301),
  ('Expression33 -> LT addOperator','Expression33',2,'p_Expression33','parser.py',302),
  ('Expression33 -> NOTEQUAL addOperator','Expression33',2,'p_Expression33','parser.py',303),
  ('Expression33 -> ISEQUAL addOperator','Expression33',2,'p_Expression33','parser.py',304),
  ('Exp3A1 -> <empty>','Exp3A1',0,'p_opConsumeExp3','parser.py',307),
  ('opMatrix -> EXCLAMATION addOperator','opMatrix',2,'p_opMatrix','parser.py',337),
  ('opMatrix -> QUESTION addOperator','opMatrix',2,'p_opMatrix','parser.py',338),
  ('opMatrix -> DOLLARSIGN addOperator','opMatrix',2,'p_opMatrix','parser.py',339),
  ('exp -> term termA1 expFunction','exp',3,'p_exp','parser.py',342),
  ('exp -> term termA1','exp',2,'p_exp','parser.py',343),
  ('termA1 -> <empty>','termA1',0,'p_opConsumeExp','parser.py',346),
  ('expFunction -> PLUS addOperator exp','expFunction',3,'p_expFunction','parser.py',373),
  ('expFunction -> MINUS addOperator exp','expFunction',3,'p_expFunction','parser.py',374),
  ('functionTypeA1 -> <empty>','functionTypeA1',0,'p_setVoid','parser.py',377),
  ('term -> factor factorA1 termFunction','term',3,'p_term','parser.py',383),
  ('term -> factor factorA1','term',2,'p_term','parser.py',384),
  ('factorA1 -> <empty>','factorA1',0,'p_opConsumeTerm','parser.py',387),
  ('termFunction -> MULTIPLY addOperator term','termFunction',3,'p_termFunction','parser.py',412),
  ('termFunction -> DIVIDE addOperator term','termFunction',3,'p_termFunction','parser.py',413),
  ('addOperator -> <empty>','addOperator',0,'p_addOperator','parser.py',416),
  ('factor -> LEFTPAR Expression2 RIGHTPAR','factor',3,'p_factor','parser.py',420),
  ('factor -> cst_PDT addOperand','factor',2,'p_factor','parser.py',421),
  ('factor -> module','factor',1,'p_factor','parser.py',422),
  ('factor -> ID addOperand addTypeId','factor',3,'p_factor','parser.py',423),
  ('addOperand -> <empty>','addOperand',0,'p_addOperand','parser.py',426),
  ('addTypeId -> <empty>','addTypeId',0,'p_addTypeId','parser.py',430),
  ('read -> READ LEFTPAR id_list RIGHTPAR SEMICOLON','read',5,'p_read','parser.py',440),
  ('id_list -> ID addRead id_listFunction','id_list',3,'p_id_list','parser.py',443),
  ('id_listFunction -> COMA id_list','id_listFunction',2,'p_id_listFunction','parser.py',446),
  ('id_listFunction -> <empty>','id_listFunction',0,'p_id_listFunction','parser.py',447),
  ('addRead -> <empty>','addRead',0,'p_addRead','parser.py',450),
  ('print -> PRINT LEFTPAR printFunction RIGHTPAR SEMICOLON','print',5,'p_print','parser.py',458),
  ('printFunction -> print_param COMA printFunction2','printFunction',3,'p_printFunction','parser.py',461),
  ('printFunction -> print_param','printFunction',1,'p_printFunction','parser.py',462),
  ('printFunction2 -> printFunction','printFunction2',1,'p_printFunction2','parser.py',465),
  ('addPrint -> <empty>','addPrint',0,'p_addPrint','parser.py',468),
  ('print_param -> Expression2 addPrint','print_param',2,'p_print_param','parser.py',475),
  ('print_param -> CST_STRING addPrintString','print_param',2,'p_print_param','parser.py',476),
  ('addPrintString -> <empty>','addPrintString',0,'p_addPrintString','parser.py',479),
  ('module -> ID LEFTPAR moduleFunction RIGHTPAR SEMICOLON','module',5,'p_module','parser.py',484),
  ('statement -> return','statement',1,'p_statement','parser.py',487),
  ('statement -> if statement','statement',2,'p_statement','parser.py',488),
  ('statement -> comment statement','statement',2,'p_statement','parser.py',489),
  ('statement -> read statement','statement',2,'p_statement','parser.py',490),
  ('statement -> print statement','statement',2,'p_statement','parser.py',491),
  ('statement -> assignment statement','statement',2,'p_statement','parser.py',492),
  ('statement -> declaration statement','statement',2,'p_statement','parser.py',493),
  ('statement -> module statement','statement',2,'p_statement','parser.py',494),
  ('statement -> for statement','statement',2,'p_statement','parser.py',495),
  ('statement -> while statement','statement',2,'p_statement','parser.py',496),
  ('statement -> <empty>','statement',0,'p_statement','parser.py',497),
  ('moduleFunction -> Expression2 COMA moduleFunction','moduleFunction',3,'p_moduleFunction','parser.py',501),
  ('moduleFunction -> Expression2 RIGHTPAR','moduleFunction',2,'p_moduleFunction','parser.py',502),
  ('moduleFunction -> <empty>','moduleFunction',0,'p_moduleFunction','parser.py',503),
]
